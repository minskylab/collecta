// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/minskylab/collecta/ent"
	"github.com/minskylab/collecta/uuid"
)

type DomainCreator struct {
	Name     string   `json:"name"`
	Email    string   `json:"email"`
	Domain   string   `json:"domain"`
	Callback string   `json:"callback"`
	Tags     []string `json:"tags"`
}

type LastSurveyState struct {
	LastQuestion *ent.Question `json:"lastQuestion"`
	Percent      float64       `json:"percent"`
}

type LoginResponse struct {
	Token string `json:"token"`
}

type Pair struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type QuestionCreator struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Kind        InputType `json:"kind"`
	Multiple    *bool     `json:"multiple"`
	Anonymous   *bool     `json:"anonymous"`
	Options     []*Pair   `json:"options"`
}

type SurveyDomain struct {
	ByID         *uuid.UUID `json:"byID"`
	ByDomainName *string    `json:"byDomainName"`
}

type SurveyGenerator struct {
	Title       string             `json:"title"`
	Description string             `json:"description"`
	Tags        []string           `json:"tags"`
	Questions   []*QuestionCreator `json:"questions"`
	Target      *SurveyTargetUsers `json:"target"`
	Metadata    []*Pair            `json:"metadata"`
	Logic       *string            `json:"logic"`
	Due         *time.Time         `json:"due"`
}

type SurveyTargetUsers struct {
	TargetKind SurveyAudenceKind `json:"targetKind"`
	Whitelist  []uuid.UUID       `json:"whitelist"`
}

type SuveyGenerationResult struct {
	How     int           `json:"how"`
	Surveys []*ent.Survey `json:"surveys"`
}

type InputType string

const (
	InputTypeOption       InputType = "OPTION"
	InputTypeText         InputType = "TEXT"
	InputTypeBoolean      InputType = "BOOLEAN"
	InputTypeSatisfaction InputType = "SATISFACTION"
)

var AllInputType = []InputType{
	InputTypeOption,
	InputTypeText,
	InputTypeBoolean,
	InputTypeSatisfaction,
}

func (e InputType) IsValid() bool {
	switch e {
	case InputTypeOption, InputTypeText, InputTypeBoolean, InputTypeSatisfaction:
		return true
	}
	return false
}

func (e InputType) String() string {
	return string(e)
}

func (e *InputType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InputType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InputType", str)
	}
	return nil
}

func (e InputType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SurveyAudenceKind string

const (
	SurveyAudenceKindPublic SurveyAudenceKind = "PUBLIC"
	SurveyAudenceKindDomain SurveyAudenceKind = "DOMAIN"
	SurveyAudenceKindClose  SurveyAudenceKind = "CLOSE"
)

var AllSurveyAudenceKind = []SurveyAudenceKind{
	SurveyAudenceKindPublic,
	SurveyAudenceKindDomain,
	SurveyAudenceKindClose,
}

func (e SurveyAudenceKind) IsValid() bool {
	switch e {
	case SurveyAudenceKindPublic, SurveyAudenceKindDomain, SurveyAudenceKindClose:
		return true
	}
	return false
}

func (e SurveyAudenceKind) String() string {
	return string(e)
}

func (e *SurveyAudenceKind) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SurveyAudenceKind(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SurveyAudenceKind", str)
	}
	return nil
}

func (e SurveyAudenceKind) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
