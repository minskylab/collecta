// Code generated by entc, DO NOT EDIT.

package contact

import (
	"fmt"
)

const (
	// Label holds the string label denoting the contact type in the database.
	Label = "contact"
	// FieldID holds the string denoting the id field in the database.
	FieldID          = "id"        // FieldName holds the string denoting the name vertex property in the database.
	FieldName        = "name"      // FieldValue holds the string denoting the value vertex property in the database.
	FieldValue       = "value"     // FieldKind holds the string denoting the kind vertex property in the database.
	FieldKind        = "kind"      // FieldPrincipal holds the string denoting the principal vertex property in the database.
	FieldPrincipal   = "principal" // FieldValidated holds the string denoting the validated vertex property in the database.
	FieldValidated   = "validated" // FieldFromAccount holds the string denoting the fromaccount vertex property in the database.
	FieldFromAccount = "from_account"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"

	// Table holds the table name of the contact in the database.
	Table = "contacts"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "contacts"
	// OwnerInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	OwnerInverseTable = "persons"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "person_contacts"
)

// Columns holds all SQL columns for contact fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldValue,
	FieldKind,
	FieldPrincipal,
	FieldValidated,
	FieldFromAccount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Contact type.
var ForeignKeys = []string{
	"person_contacts",
}

var (
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
	// DefaultFromAccount holds the default value on creation for the fromAccount field.
	DefaultFromAccount bool
)

// Kind defines the type for the kind enum field.
type Kind string

// KindEmail is the default Kind.
const DefaultKind = KindEmail

// Kind values.
const (
	KindEmail Kind = "Email"
	KindPhone Kind = "Phone"
)

func (s Kind) String() string {
	return string(s)
}

// KindValidator is a validator for the "k" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindEmail, KindPhone:
		return nil
	default:
		return fmt.Errorf("contact: invalid enum value for kind field: %q", k)
	}
}
