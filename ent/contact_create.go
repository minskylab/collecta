// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/person"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	id          *uuid.UUID
	name        *string
	value       *string
	kind        *contact.Kind
	principal   *bool
	validated   *bool
	fromAccount *bool
	owner       map[uuid.UUID]struct{}
}

// SetName sets the name field.
func (cc *ContactCreate) SetName(s string) *ContactCreate {
	cc.name = &s
	return cc
}

// SetValue sets the value field.
func (cc *ContactCreate) SetValue(s string) *ContactCreate {
	cc.value = &s
	return cc
}

// SetKind sets the kind field.
func (cc *ContactCreate) SetKind(c contact.Kind) *ContactCreate {
	cc.kind = &c
	return cc
}

// SetNillableKind sets the kind field if the given value is not nil.
func (cc *ContactCreate) SetNillableKind(c *contact.Kind) *ContactCreate {
	if c != nil {
		cc.SetKind(*c)
	}
	return cc
}

// SetPrincipal sets the principal field.
func (cc *ContactCreate) SetPrincipal(b bool) *ContactCreate {
	cc.principal = &b
	return cc
}

// SetValidated sets the validated field.
func (cc *ContactCreate) SetValidated(b bool) *ContactCreate {
	cc.validated = &b
	return cc
}

// SetFromAccount sets the fromAccount field.
func (cc *ContactCreate) SetFromAccount(b bool) *ContactCreate {
	cc.fromAccount = &b
	return cc
}

// SetNillableFromAccount sets the fromAccount field if the given value is not nil.
func (cc *ContactCreate) SetNillableFromAccount(b *bool) *ContactCreate {
	if b != nil {
		cc.SetFromAccount(*b)
	}
	return cc
}

// SetID sets the id field.
func (cc *ContactCreate) SetID(u uuid.UUID) *ContactCreate {
	cc.id = &u
	return cc
}

// SetOwnerID sets the owner edge to Person by id.
func (cc *ContactCreate) SetOwnerID(id uuid.UUID) *ContactCreate {
	if cc.owner == nil {
		cc.owner = make(map[uuid.UUID]struct{})
	}
	cc.owner[id] = struct{}{}
	return cc
}

// SetOwner sets the owner edge to Person.
func (cc *ContactCreate) SetOwner(p *Person) *ContactCreate {
	return cc.SetOwnerID(p.ID)
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	if cc.name == nil {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if cc.value == nil {
		return nil, errors.New("ent: missing required field \"value\"")
	}
	if err := contact.ValueValidator(*cc.value); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"value\": %v", err)
	}
	if cc.kind == nil {
		v := contact.DefaultKind
		cc.kind = &v
	}
	if err := contact.KindValidator(*cc.kind); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
	}
	if cc.principal == nil {
		return nil, errors.New("ent: missing required field \"principal\"")
	}
	if cc.validated == nil {
		return nil, errors.New("ent: missing required field \"validated\"")
	}
	if cc.fromAccount == nil {
		v := contact.DefaultFromAccount
		cc.fromAccount = &v
	}
	if len(cc.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	if cc.owner == nil {
		return nil, errors.New("ent: missing required edge \"owner\"")
	}
	return cc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	var (
		c     = &Contact{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: contact.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contact.FieldID,
			},
		}
	)
	if value := cc.id; value != nil {
		c.ID = *value
		_spec.ID.Value = *value
	}
	if value := cc.name; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: contact.FieldName,
		})
		c.Name = *value
	}
	if value := cc.value; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: contact.FieldValue,
		})
		c.Value = *value
	}
	if value := cc.kind; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  *value,
			Column: contact.FieldKind,
		})
		c.Kind = *value
	}
	if value := cc.principal; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: contact.FieldPrincipal,
		})
		c.Principal = *value
	}
	if value := cc.validated; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: contact.FieldValidated,
		})
		c.Validated = *value
	}
	if value := cc.fromAccount; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: contact.FieldFromAccount,
		})
		c.FromAccount = *value
	}
	if nodes := cc.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
