// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/answer"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/question"
	"github.com/rs/xid"
)

// QuestionQuery is the builder for querying Question entities.
type QuestionQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.Question
	// eager-loading edges.
	withAnswers *AnswerQuery
	withInput   *InputQuery
	withFlow    *FlowQuery
	withFKs     bool
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (qq *QuestionQuery) Where(ps ...predicate.Question) *QuestionQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit adds a limit step to the query.
func (qq *QuestionQuery) Limit(limit int) *QuestionQuery {
	qq.limit = &limit
	return qq
}

// Offset adds an offset step to the query.
func (qq *QuestionQuery) Offset(offset int) *QuestionQuery {
	qq.offset = &offset
	return qq
}

// Order adds an order step to the query.
func (qq *QuestionQuery) Order(o ...Order) *QuestionQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryAnswers chains the current query on the answers edge.
func (qq *QuestionQuery) QueryAnswers() *AnswerQuery {
	query := &AnswerQuery{config: qq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(question.Table, question.FieldID, qq.sqlQuery()),
		sqlgraph.To(answer.Table, answer.FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, question.AnswersTable, question.AnswersColumn),
	)
	query.sql = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
	return query
}

// QueryInput chains the current query on the input edge.
func (qq *QuestionQuery) QueryInput() *InputQuery {
	query := &InputQuery{config: qq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(question.Table, question.FieldID, qq.sqlQuery()),
		sqlgraph.To(input.Table, input.FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, question.InputTable, question.InputColumn),
	)
	query.sql = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
	return query
}

// QueryFlow chains the current query on the flow edge.
func (qq *QuestionQuery) QueryFlow() *FlowQuery {
	query := &FlowQuery{config: qq.config}
	step := sqlgraph.NewStep(
		sqlgraph.From(question.Table, question.FieldID, qq.sqlQuery()),
		sqlgraph.To(flow.Table, flow.FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, question.FlowTable, question.FlowColumn),
	)
	query.sql = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
	return query
}

// First returns the first Question entity in the query. Returns *NotFoundError when no question was found.
func (qq *QuestionQuery) First(ctx context.Context) (*Question, error) {
	qs, err := qq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(qs) == 0 {
		return nil, &NotFoundError{question.Label}
	}
	return qs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QuestionQuery) FirstX(ctx context.Context) *Question {
	q, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return q
}

// FirstID returns the first Question id in the query. Returns *NotFoundError when no id was found.
func (qq *QuestionQuery) FirstID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = qq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{question.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (qq *QuestionQuery) FirstXID(ctx context.Context) xid.ID {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only Question entity in the query, returns an error if not exactly one entity was returned.
func (qq *QuestionQuery) Only(ctx context.Context) (*Question, error) {
	qs, err := qq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(qs) {
	case 1:
		return qs[0], nil
	case 0:
		return nil, &NotFoundError{question.Label}
	default:
		return nil, &NotSingularError{question.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QuestionQuery) OnlyX(ctx context.Context) *Question {
	q, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return q
}

// OnlyID returns the only Question id in the query, returns an error if not exactly one id was returned.
func (qq *QuestionQuery) OnlyID(ctx context.Context) (id xid.ID, err error) {
	var ids []xid.ID
	if ids, err = qq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{question.Label}
	default:
		err = &NotSingularError{question.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (qq *QuestionQuery) OnlyXID(ctx context.Context) xid.ID {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Questions.
func (qq *QuestionQuery) All(ctx context.Context) ([]*Question, error) {
	return qq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (qq *QuestionQuery) AllX(ctx context.Context) []*Question {
	qs, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return qs
}

// IDs executes the query and returns a list of Question ids.
func (qq *QuestionQuery) IDs(ctx context.Context) ([]xid.ID, error) {
	var ids []xid.ID
	if err := qq.Select(question.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QuestionQuery) IDsX(ctx context.Context) []xid.ID {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QuestionQuery) Count(ctx context.Context) (int, error) {
	return qq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QuestionQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QuestionQuery) Exist(ctx context.Context) (bool, error) {
	return qq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QuestionQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QuestionQuery) Clone() *QuestionQuery {
	return &QuestionQuery{
		config:     qq.config,
		limit:      qq.limit,
		offset:     qq.offset,
		order:      append([]Order{}, qq.order...),
		unique:     append([]string{}, qq.unique...),
		predicates: append([]predicate.Question{}, qq.predicates...),
		// clone intermediate query.
		sql: qq.sql.Clone(),
	}
}

//  WithAnswers tells the query-builder to eager-loads the nodes that are connected to
// the "answers" edge. The optional arguments used to configure the query builder of the edge.
func (qq *QuestionQuery) WithAnswers(opts ...func(*AnswerQuery)) *QuestionQuery {
	query := &AnswerQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withAnswers = query
	return qq
}

//  WithInput tells the query-builder to eager-loads the nodes that are connected to
// the "input" edge. The optional arguments used to configure the query builder of the edge.
func (qq *QuestionQuery) WithInput(opts ...func(*InputQuery)) *QuestionQuery {
	query := &InputQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withInput = query
	return qq
}

//  WithFlow tells the query-builder to eager-loads the nodes that are connected to
// the "flow" edge. The optional arguments used to configure the query builder of the edge.
func (qq *QuestionQuery) WithFlow(opts ...func(*FlowQuery)) *QuestionQuery {
	query := &FlowQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withFlow = query
	return qq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Hash string `json:"hash,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Question.Query().
//		GroupBy(question.FieldHash).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (qq *QuestionQuery) GroupBy(field string, fields ...string) *QuestionGroupBy {
	group := &QuestionGroupBy{config: qq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = qq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		Hash string `json:"hash,omitempty"`
//	}
//
//	client.Question.Query().
//		Select(question.FieldHash).
//		Scan(ctx, &v)
//
func (qq *QuestionQuery) Select(field string, fields ...string) *QuestionSelect {
	selector := &QuestionSelect{config: qq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = qq.sqlQuery()
	return selector
}

func (qq *QuestionQuery) sqlAll(ctx context.Context) ([]*Question, error) {
	var (
		nodes       = []*Question{}
		withFKs     = qq.withFKs
		_spec       = qq.querySpec()
		loadedTypes = [3]bool{
			qq.withAnswers != nil,
			qq.withInput != nil,
			qq.withFlow != nil,
		}
	)
	if qq.withFlow != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, question.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &Question{config: qq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := qq.withAnswers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[xid.ID]*Question)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Answer(func(s *sql.Selector) {
			s.Where(sql.InValues(question.AnswersColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.question_answers
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "question_answers" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_answers" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Answers = append(node.Edges.Answers, n)
		}
	}

	if query := qq.withInput; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[xid.ID]*Question)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
		}
		query.withFKs = true
		query.Where(predicate.Input(func(s *sql.Selector) {
			s.Where(sql.InValues(question.InputColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.question_input
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "question_input" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "question_input" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Input = n
		}
	}

	if query := qq.withFlow; query != nil {
		ids := make([]xid.ID, 0, len(nodes))
		nodeids := make(map[xid.ID][]*Question)
		for i := range nodes {
			if fk := nodes[i].flow_questions; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(flow.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "flow_questions" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Flow = n
			}
		}
	}

	return nodes, nil
}

func (qq *QuestionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QuestionQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := qq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (qq *QuestionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   question.Table,
			Columns: question.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: question.FieldID,
			},
		},
		From:   qq.sql,
		Unique: true,
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qq *QuestionQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(question.Table)
	selector := builder.Select(t1.Columns(question.Columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(question.Columns...)...)
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector)
	}
	if offset := qq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionGroupBy is the builder for group-by Question entities.
type QuestionGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QuestionGroupBy) Aggregate(fns ...Aggregate) *QuestionGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the group-by query and scan the result into the given value.
func (qgb *QuestionGroupBy) Scan(ctx context.Context, v interface{}) error {
	return qgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qgb *QuestionGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := qgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuestionGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuestionGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qgb *QuestionGroupBy) StringsX(ctx context.Context) []string {
	v, err := qgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuestionGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuestionGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qgb *QuestionGroupBy) IntsX(ctx context.Context) []int {
	v, err := qgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuestionGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuestionGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qgb *QuestionGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := qgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (qgb *QuestionGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuestionGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qgb *QuestionGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := qgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qgb *QuestionGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qgb.sqlQuery().Query()
	if err := qgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qgb *QuestionGroupBy) sqlQuery() *sql.Selector {
	selector := qgb.sql
	columns := make([]string, 0, len(qgb.fields)+len(qgb.fns))
	columns = append(columns, qgb.fields...)
	for _, fn := range qgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(qgb.fields...)
}

// QuestionSelect is the builder for select fields of Question entities.
type QuestionSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (qs *QuestionSelect) Scan(ctx context.Context, v interface{}) error {
	return qs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qs *QuestionSelect) ScanX(ctx context.Context, v interface{}) {
	if err := qs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (qs *QuestionSelect) Strings(ctx context.Context) ([]string, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuestionSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qs *QuestionSelect) StringsX(ctx context.Context) []string {
	v, err := qs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (qs *QuestionSelect) Ints(ctx context.Context) ([]int, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuestionSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qs *QuestionSelect) IntsX(ctx context.Context) []int {
	v, err := qs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (qs *QuestionSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuestionSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qs *QuestionSelect) Float64sX(ctx context.Context) []float64 {
	v, err := qs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (qs *QuestionSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuestionSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qs *QuestionSelect) BoolsX(ctx context.Context) []bool {
	v, err := qs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qs *QuestionSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qs.sqlQuery().Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qs *QuestionSelect) sqlQuery() sql.Querier {
	selector := qs.sql
	selector.Select(selector.Columns(qs.fields...)...)
	return selector
}
