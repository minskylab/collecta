// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/answer"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/question"
)

// QuestionCreate is the builder for creating a Question entity.
type QuestionCreate struct {
	config
	id          *uuid.UUID
	hash        *string
	title       *string
	description *string
	metadata    *map[string]string
	anonymous   *bool
	answers     map[uuid.UUID]struct{}
	input       map[uuid.UUID]struct{}
	flow        map[uuid.UUID]struct{}
}

// SetHash sets the hash field.
func (qc *QuestionCreate) SetHash(s string) *QuestionCreate {
	qc.hash = &s
	return qc
}

// SetTitle sets the title field.
func (qc *QuestionCreate) SetTitle(s string) *QuestionCreate {
	qc.title = &s
	return qc
}

// SetDescription sets the description field.
func (qc *QuestionCreate) SetDescription(s string) *QuestionCreate {
	qc.description = &s
	return qc
}

// SetMetadata sets the metadata field.
func (qc *QuestionCreate) SetMetadata(m map[string]string) *QuestionCreate {
	qc.metadata = &m
	return qc
}

// SetAnonymous sets the anonymous field.
func (qc *QuestionCreate) SetAnonymous(b bool) *QuestionCreate {
	qc.anonymous = &b
	return qc
}

// SetNillableAnonymous sets the anonymous field if the given value is not nil.
func (qc *QuestionCreate) SetNillableAnonymous(b *bool) *QuestionCreate {
	if b != nil {
		qc.SetAnonymous(*b)
	}
	return qc
}

// SetID sets the id field.
func (qc *QuestionCreate) SetID(u uuid.UUID) *QuestionCreate {
	qc.id = &u
	return qc
}

// AddAnswerIDs adds the answers edge to Answer by ids.
func (qc *QuestionCreate) AddAnswerIDs(ids ...uuid.UUID) *QuestionCreate {
	if qc.answers == nil {
		qc.answers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		qc.answers[ids[i]] = struct{}{}
	}
	return qc
}

// AddAnswers adds the answers edges to Answer.
func (qc *QuestionCreate) AddAnswers(a ...*Answer) *QuestionCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qc.AddAnswerIDs(ids...)
}

// SetInputID sets the input edge to Input by id.
func (qc *QuestionCreate) SetInputID(id uuid.UUID) *QuestionCreate {
	if qc.input == nil {
		qc.input = make(map[uuid.UUID]struct{})
	}
	qc.input[id] = struct{}{}
	return qc
}

// SetNillableInputID sets the input edge to Input by id if the given value is not nil.
func (qc *QuestionCreate) SetNillableInputID(id *uuid.UUID) *QuestionCreate {
	if id != nil {
		qc = qc.SetInputID(*id)
	}
	return qc
}

// SetInput sets the input edge to Input.
func (qc *QuestionCreate) SetInput(i *Input) *QuestionCreate {
	return qc.SetInputID(i.ID)
}

// SetFlowID sets the flow edge to Flow by id.
func (qc *QuestionCreate) SetFlowID(id uuid.UUID) *QuestionCreate {
	if qc.flow == nil {
		qc.flow = make(map[uuid.UUID]struct{})
	}
	qc.flow[id] = struct{}{}
	return qc
}

// SetNillableFlowID sets the flow edge to Flow by id if the given value is not nil.
func (qc *QuestionCreate) SetNillableFlowID(id *uuid.UUID) *QuestionCreate {
	if id != nil {
		qc = qc.SetFlowID(*id)
	}
	return qc
}

// SetFlow sets the flow edge to Flow.
func (qc *QuestionCreate) SetFlow(f *Flow) *QuestionCreate {
	return qc.SetFlowID(f.ID)
}

// Save creates the Question in the database.
func (qc *QuestionCreate) Save(ctx context.Context) (*Question, error) {
	if qc.hash == nil {
		return nil, errors.New("ent: missing required field \"hash\"")
	}
	if qc.title == nil {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if err := question.TitleValidator(*qc.title); err != nil {
		return nil, fmt.Errorf("ent: validator failed for field \"title\": %v", err)
	}
	if qc.description == nil {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if qc.anonymous == nil {
		v := question.DefaultAnonymous
		qc.anonymous = &v
	}
	if len(qc.input) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"input\"")
	}
	if len(qc.flow) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"flow\"")
	}
	return qc.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuestionCreate) SaveX(ctx context.Context) *Question {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qc *QuestionCreate) sqlSave(ctx context.Context) (*Question, error) {
	var (
		q     = &Question{config: qc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: question.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: question.FieldID,
			},
		}
	)
	if value := qc.id; value != nil {
		q.ID = *value
		_spec.ID.Value = *value
	}
	if value := qc.hash; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: question.FieldHash,
		})
		q.Hash = *value
	}
	if value := qc.title; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: question.FieldTitle,
		})
		q.Title = *value
	}
	if value := qc.description; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: question.FieldDescription,
		})
		q.Description = *value
	}
	if value := qc.metadata; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: question.FieldMetadata,
		})
		q.Metadata = *value
	}
	if value := qc.anonymous; value != nil {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: question.FieldAnonymous,
		})
		q.Anonymous = *value
	}
	if nodes := qc.answers; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: answer.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.input; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   question.InputTable,
			Columns: []string{question.InputColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: input.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qc.flow; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FlowTable,
			Columns: []string{question.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return q, nil
}
