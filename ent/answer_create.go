// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/answer"
	"github.com/minskylab/collecta/ent/question"
	"github.com/minskylab/collecta/uuid"
)

// AnswerCreate is the builder for creating a Answer entity.
type AnswerCreate struct {
	config
	mutation *AnswerMutation
	hooks    []Hook
}

// SetAt sets the at field.
func (ac *AnswerCreate) SetAt(t time.Time) *AnswerCreate {
	ac.mutation.SetAt(t)
	return ac
}

// SetNillableAt sets the at field if the given value is not nil.
func (ac *AnswerCreate) SetNillableAt(t *time.Time) *AnswerCreate {
	if t != nil {
		ac.SetAt(*t)
	}
	return ac
}

// SetResponses sets the responses field.
func (ac *AnswerCreate) SetResponses(s []string) *AnswerCreate {
	ac.mutation.SetResponses(s)
	return ac
}

// SetValid sets the valid field.
func (ac *AnswerCreate) SetValid(b bool) *AnswerCreate {
	ac.mutation.SetValid(b)
	return ac
}

// SetNillableValid sets the valid field if the given value is not nil.
func (ac *AnswerCreate) SetNillableValid(b *bool) *AnswerCreate {
	if b != nil {
		ac.SetValid(*b)
	}
	return ac
}

// SetID sets the id field.
func (ac *AnswerCreate) SetID(u uuid.UUID) *AnswerCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetQuestionID sets the question edge to Question by id.
func (ac *AnswerCreate) SetQuestionID(id uuid.UUID) *AnswerCreate {
	ac.mutation.SetQuestionID(id)
	return ac
}

// SetQuestion sets the question edge to Question.
func (ac *AnswerCreate) SetQuestion(q *Question) *AnswerCreate {
	return ac.SetQuestionID(q.ID)
}

// Save creates the Answer in the database.
func (ac *AnswerCreate) Save(ctx context.Context) (*Answer, error) {
	if _, ok := ac.mutation.At(); !ok {
		v := answer.DefaultAt()
		ac.mutation.SetAt(v)
	}
	if _, ok := ac.mutation.Responses(); !ok {
		return nil, errors.New("ent: missing required field \"responses\"")
	}
	if _, ok := ac.mutation.QuestionID(); !ok {
		return nil, errors.New("ent: missing required edge \"question\"")
	}
	var (
		err  error
		node *Answer
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnswerCreate) SaveX(ctx context.Context) *Answer {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AnswerCreate) sqlSave(ctx context.Context) (*Answer, error) {
	var (
		a     = &Answer{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: answer.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: answer.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		a.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.At(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: answer.FieldAt,
		})
		a.At = value
	}
	if value, ok := ac.mutation.Responses(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: answer.FieldResponses,
		})
		a.Responses = value
	}
	if value, ok := ac.mutation.Valid(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: answer.FieldValid,
		})
		a.Valid = value
	}
	if nodes := ac.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
