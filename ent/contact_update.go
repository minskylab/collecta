// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/uuid"
)

// ContactUpdate is the builder for updating Contact entities.
type ContactUpdate struct {
	config
	hooks      []Hook
	mutation   *ContactMutation
	predicates []predicate.Contact
}

// Where adds a new predicate for the builder.
func (cu *ContactUpdate) Where(ps ...predicate.Contact) *ContactUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetName sets the name field.
func (cu *ContactUpdate) SetName(s string) *ContactUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetValue sets the value field.
func (cu *ContactUpdate) SetValue(s string) *ContactUpdate {
	cu.mutation.SetValue(s)
	return cu
}

// SetKind sets the kind field.
func (cu *ContactUpdate) SetKind(c contact.Kind) *ContactUpdate {
	cu.mutation.SetKind(c)
	return cu
}

// SetNillableKind sets the kind field if the given value is not nil.
func (cu *ContactUpdate) SetNillableKind(c *contact.Kind) *ContactUpdate {
	if c != nil {
		cu.SetKind(*c)
	}
	return cu
}

// SetPrincipal sets the principal field.
func (cu *ContactUpdate) SetPrincipal(b bool) *ContactUpdate {
	cu.mutation.SetPrincipal(b)
	return cu
}

// SetValidated sets the validated field.
func (cu *ContactUpdate) SetValidated(b bool) *ContactUpdate {
	cu.mutation.SetValidated(b)
	return cu
}

// SetFromAccount sets the fromAccount field.
func (cu *ContactUpdate) SetFromAccount(b bool) *ContactUpdate {
	cu.mutation.SetFromAccount(b)
	return cu
}

// SetNillableFromAccount sets the fromAccount field if the given value is not nil.
func (cu *ContactUpdate) SetNillableFromAccount(b *bool) *ContactUpdate {
	if b != nil {
		cu.SetFromAccount(*b)
	}
	return cu
}

// SetOwnerID sets the owner edge to Person by id.
func (cu *ContactUpdate) SetOwnerID(id uuid.UUID) *ContactUpdate {
	cu.mutation.SetOwnerID(id)
	return cu
}

// SetOwner sets the owner edge to Person.
func (cu *ContactUpdate) SetOwner(p *Person) *ContactUpdate {
	return cu.SetOwnerID(p.ID)
}

// ClearOwner clears the owner edge to Person.
func (cu *ContactUpdate) ClearOwner() *ContactUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ContactUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Value(); ok {
		if err := contact.ValueValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"value\": %v", err)
		}
	}
	if v, ok := cu.mutation.Kind(); ok {
		if err := contact.KindValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
		}
	}

	if _, ok := cu.mutation.OwnerID(); cu.mutation.OwnerCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"owner\"")
	}
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContactUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContactUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContactUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ContactUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contact.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldName,
		})
	}
	if value, ok := cu.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldValue,
		})
	}
	if value, ok := cu.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contact.FieldKind,
		})
	}
	if value, ok := cu.mutation.Principal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldPrincipal,
		})
	}
	if value, ok := cu.mutation.Validated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldValidated,
		})
	}
	if value, ok := cu.mutation.FromAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldFromAccount,
		})
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ContactUpdateOne is the builder for updating a single Contact entity.
type ContactUpdateOne struct {
	config
	hooks    []Hook
	mutation *ContactMutation
}

// SetName sets the name field.
func (cuo *ContactUpdateOne) SetName(s string) *ContactUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetValue sets the value field.
func (cuo *ContactUpdateOne) SetValue(s string) *ContactUpdateOne {
	cuo.mutation.SetValue(s)
	return cuo
}

// SetKind sets the kind field.
func (cuo *ContactUpdateOne) SetKind(c contact.Kind) *ContactUpdateOne {
	cuo.mutation.SetKind(c)
	return cuo
}

// SetNillableKind sets the kind field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableKind(c *contact.Kind) *ContactUpdateOne {
	if c != nil {
		cuo.SetKind(*c)
	}
	return cuo
}

// SetPrincipal sets the principal field.
func (cuo *ContactUpdateOne) SetPrincipal(b bool) *ContactUpdateOne {
	cuo.mutation.SetPrincipal(b)
	return cuo
}

// SetValidated sets the validated field.
func (cuo *ContactUpdateOne) SetValidated(b bool) *ContactUpdateOne {
	cuo.mutation.SetValidated(b)
	return cuo
}

// SetFromAccount sets the fromAccount field.
func (cuo *ContactUpdateOne) SetFromAccount(b bool) *ContactUpdateOne {
	cuo.mutation.SetFromAccount(b)
	return cuo
}

// SetNillableFromAccount sets the fromAccount field if the given value is not nil.
func (cuo *ContactUpdateOne) SetNillableFromAccount(b *bool) *ContactUpdateOne {
	if b != nil {
		cuo.SetFromAccount(*b)
	}
	return cuo
}

// SetOwnerID sets the owner edge to Person by id.
func (cuo *ContactUpdateOne) SetOwnerID(id uuid.UUID) *ContactUpdateOne {
	cuo.mutation.SetOwnerID(id)
	return cuo
}

// SetOwner sets the owner edge to Person.
func (cuo *ContactUpdateOne) SetOwner(p *Person) *ContactUpdateOne {
	return cuo.SetOwnerID(p.ID)
}

// ClearOwner clears the owner edge to Person.
func (cuo *ContactUpdateOne) ClearOwner() *ContactUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *ContactUpdateOne) Save(ctx context.Context) (*Contact, error) {
	if v, ok := cuo.mutation.Value(); ok {
		if err := contact.ValueValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"value\": %v", err)
		}
	}
	if v, ok := cuo.mutation.Kind(); ok {
		if err := contact.KindValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
		}
	}

	if _, ok := cuo.mutation.OwnerID(); cuo.mutation.OwnerCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"owner\"")
	}
	var (
		err  error
		node *Contact
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ContactMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContactUpdateOne) SaveX(ctx context.Context) *Contact {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ContactUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContactUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ContactUpdateOne) sqlSave(ctx context.Context) (c *Contact, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   contact.Table,
			Columns: contact.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: contact.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Contact.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldName,
		})
	}
	if value, ok := cuo.mutation.Value(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: contact.FieldValue,
		})
	}
	if value, ok := cuo.mutation.Kind(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: contact.FieldKind,
		})
	}
	if value, ok := cuo.mutation.Principal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldPrincipal,
		})
	}
	if value, ok := cuo.mutation.Validated(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldValidated,
		})
	}
	if value, ok := cuo.mutation.FromAccount(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: contact.FieldFromAccount,
		})
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   contact.OwnerTable,
			Columns: []string{contact.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Contact{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{contact.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
