// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/account"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/predicate"
)

// AccountUpdate is the builder for updating Account entities.
type AccountUpdate struct {
	config
	hooks      []Hook
	mutation   *AccountMutation
	predicates []predicate.Account
}

// Where adds a new predicate for the builder.
func (au *AccountUpdate) Where(ps ...predicate.Account) *AccountUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetType sets the type field.
func (au *AccountUpdate) SetType(a account.Type) *AccountUpdate {
	au.mutation.SetType(a)
	return au
}

// SetSub sets the sub field.
func (au *AccountUpdate) SetSub(s string) *AccountUpdate {
	au.mutation.SetSub(s)
	return au
}

// SetRemoteID sets the remoteID field.
func (au *AccountUpdate) SetRemoteID(s string) *AccountUpdate {
	au.mutation.SetRemoteID(s)
	return au
}

// SetSecret sets the secret field.
func (au *AccountUpdate) SetSecret(s string) *AccountUpdate {
	au.mutation.SetSecret(s)
	return au
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (au *AccountUpdate) SetNillableSecret(s *string) *AccountUpdate {
	if s != nil {
		au.SetSecret(*s)
	}
	return au
}

// ClearSecret clears the value of secret.
func (au *AccountUpdate) ClearSecret() *AccountUpdate {
	au.mutation.ClearSecret()
	return au
}

// SetOwnerID sets the owner edge to Person by id.
func (au *AccountUpdate) SetOwnerID(id uuid.UUID) *AccountUpdate {
	au.mutation.SetOwnerID(id)
	return au
}

// SetNillableOwnerID sets the owner edge to Person by id if the given value is not nil.
func (au *AccountUpdate) SetNillableOwnerID(id *uuid.UUID) *AccountUpdate {
	if id != nil {
		au = au.SetOwnerID(*id)
	}
	return au
}

// SetOwner sets the owner edge to Person.
func (au *AccountUpdate) SetOwner(p *Person) *AccountUpdate {
	return au.SetOwnerID(p.ID)
}

// ClearOwner clears the owner edge to Person.
func (au *AccountUpdate) ClearOwner() *AccountUpdate {
	au.mutation.ClearOwner()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *AccountUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := au.mutation.GetType(); ok {
		if err := account.TypeValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	if v, ok := au.mutation.Sub(); ok {
		if err := account.SubValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"sub\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AccountUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AccountUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AccountUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AccountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := au.mutation.Sub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSub,
		})
	}
	if value, ok := au.mutation.RemoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldRemoteID,
		})
	}
	if value, ok := au.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSecret,
		})
	}
	if au.mutation.SecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldSecret,
		})
	}
	if au.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.OwnerTable,
			Columns: []string{account.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.OwnerTable,
			Columns: []string{account.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AccountUpdateOne is the builder for updating a single Account entity.
type AccountUpdateOne struct {
	config
	hooks    []Hook
	mutation *AccountMutation
}

// SetType sets the type field.
func (auo *AccountUpdateOne) SetType(a account.Type) *AccountUpdateOne {
	auo.mutation.SetType(a)
	return auo
}

// SetSub sets the sub field.
func (auo *AccountUpdateOne) SetSub(s string) *AccountUpdateOne {
	auo.mutation.SetSub(s)
	return auo
}

// SetRemoteID sets the remoteID field.
func (auo *AccountUpdateOne) SetRemoteID(s string) *AccountUpdateOne {
	auo.mutation.SetRemoteID(s)
	return auo
}

// SetSecret sets the secret field.
func (auo *AccountUpdateOne) SetSecret(s string) *AccountUpdateOne {
	auo.mutation.SetSecret(s)
	return auo
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableSecret(s *string) *AccountUpdateOne {
	if s != nil {
		auo.SetSecret(*s)
	}
	return auo
}

// ClearSecret clears the value of secret.
func (auo *AccountUpdateOne) ClearSecret() *AccountUpdateOne {
	auo.mutation.ClearSecret()
	return auo
}

// SetOwnerID sets the owner edge to Person by id.
func (auo *AccountUpdateOne) SetOwnerID(id uuid.UUID) *AccountUpdateOne {
	auo.mutation.SetOwnerID(id)
	return auo
}

// SetNillableOwnerID sets the owner edge to Person by id if the given value is not nil.
func (auo *AccountUpdateOne) SetNillableOwnerID(id *uuid.UUID) *AccountUpdateOne {
	if id != nil {
		auo = auo.SetOwnerID(*id)
	}
	return auo
}

// SetOwner sets the owner edge to Person.
func (auo *AccountUpdateOne) SetOwner(p *Person) *AccountUpdateOne {
	return auo.SetOwnerID(p.ID)
}

// ClearOwner clears the owner edge to Person.
func (auo *AccountUpdateOne) ClearOwner() *AccountUpdateOne {
	auo.mutation.ClearOwner()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *AccountUpdateOne) Save(ctx context.Context) (*Account, error) {
	if v, ok := auo.mutation.GetType(); ok {
		if err := account.TypeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	if v, ok := auo.mutation.Sub(); ok {
		if err := account.SubValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"sub\": %v", err)
		}
	}

	var (
		err  error
		node *Account
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AccountUpdateOne) SaveX(ctx context.Context) *Account {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *AccountUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AccountUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AccountUpdateOne) sqlSave(ctx context.Context) (a *Account, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   account.Table,
			Columns: account.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Account.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: account.FieldType,
		})
	}
	if value, ok := auo.mutation.Sub(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSub,
		})
	}
	if value, ok := auo.mutation.RemoteID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldRemoteID,
		})
	}
	if value, ok := auo.mutation.Secret(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSecret,
		})
	}
	if auo.mutation.SecretCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: account.FieldSecret,
		})
	}
	if auo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.OwnerTable,
			Columns: []string{account.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.OwnerTable,
			Columns: []string{account.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Account{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{account.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
