// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/question"
	"github.com/minskylab/collecta/ent/survey"
	"github.com/minskylab/collecta/uuid"
)

// FlowUpdate is the builder for updating Flow entities.
type FlowUpdate struct {
	config
	hooks      []Hook
	mutation   *FlowMutation
	predicates []predicate.Flow
}

// Where adds a new predicate for the builder.
func (fu *FlowUpdate) Where(ps ...predicate.Flow) *FlowUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetState sets the state field.
func (fu *FlowUpdate) SetState(u uuid.UUID) *FlowUpdate {
	fu.mutation.SetState(u)
	return fu
}

// SetStateTable sets the stateTable field.
func (fu *FlowUpdate) SetStateTable(s string) *FlowUpdate {
	fu.mutation.SetStateTable(s)
	return fu
}

// SetInitialState sets the initialState field.
func (fu *FlowUpdate) SetInitialState(u uuid.UUID) *FlowUpdate {
	fu.mutation.SetInitialState(u)
	return fu
}

// SetTerminationState sets the terminationState field.
func (fu *FlowUpdate) SetTerminationState(u uuid.UUID) *FlowUpdate {
	fu.mutation.SetTerminationState(u)
	return fu
}

// SetPastState sets the pastState field.
func (fu *FlowUpdate) SetPastState(u uuid.UUID) *FlowUpdate {
	fu.mutation.SetPastState(u)
	return fu
}

// ClearPastState clears the value of pastState.
func (fu *FlowUpdate) ClearPastState() *FlowUpdate {
	fu.mutation.ClearPastState()
	return fu
}

// SetSurveyID sets the survey edge to Survey by id.
func (fu *FlowUpdate) SetSurveyID(id uuid.UUID) *FlowUpdate {
	fu.mutation.SetSurveyID(id)
	return fu
}

// SetNillableSurveyID sets the survey edge to Survey by id if the given value is not nil.
func (fu *FlowUpdate) SetNillableSurveyID(id *uuid.UUID) *FlowUpdate {
	if id != nil {
		fu = fu.SetSurveyID(*id)
	}
	return fu
}

// SetSurvey sets the survey edge to Survey.
func (fu *FlowUpdate) SetSurvey(s *Survey) *FlowUpdate {
	return fu.SetSurveyID(s.ID)
}

// AddQuestionIDs adds the questions edge to Question by ids.
func (fu *FlowUpdate) AddQuestionIDs(ids ...uuid.UUID) *FlowUpdate {
	fu.mutation.AddQuestionIDs(ids...)
	return fu
}

// AddQuestions adds the questions edges to Question.
func (fu *FlowUpdate) AddQuestions(q ...*Question) *FlowUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.AddQuestionIDs(ids...)
}

// ClearSurvey clears the survey edge to Survey.
func (fu *FlowUpdate) ClearSurvey() *FlowUpdate {
	fu.mutation.ClearSurvey()
	return fu
}

// RemoveQuestionIDs removes the questions edge to Question by ids.
func (fu *FlowUpdate) RemoveQuestionIDs(ids ...uuid.UUID) *FlowUpdate {
	fu.mutation.RemoveQuestionIDs(ids...)
	return fu
}

// RemoveQuestions removes questions edges to Question.
func (fu *FlowUpdate) RemoveQuestions(q ...*Question) *FlowUpdate {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FlowUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := fu.mutation.StateTable(); ok {
		if err := flow.StateTableValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"stateTable\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FlowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flow.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldState,
		})
	}
	if value, ok := fu.mutation.StateTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldStateTable,
		})
	}
	if value, ok := fu.mutation.InitialState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldInitialState,
		})
	}
	if value, ok := fu.mutation.TerminationState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldTerminationState,
		})
	}
	if value, ok := fu.mutation.PastState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldPastState,
		})
	}
	if fu.mutation.PastStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: flow.FieldPastState,
		})
	}
	if fu.mutation.InputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldInputs,
		})
	}
	if fu.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flow.SurveyTable,
			Columns: []string{flow.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flow.SurveyTable,
			Columns: []string{flow.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := fu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FlowUpdateOne is the builder for updating a single Flow entity.
type FlowUpdateOne struct {
	config
	hooks    []Hook
	mutation *FlowMutation
}

// SetState sets the state field.
func (fuo *FlowUpdateOne) SetState(u uuid.UUID) *FlowUpdateOne {
	fuo.mutation.SetState(u)
	return fuo
}

// SetStateTable sets the stateTable field.
func (fuo *FlowUpdateOne) SetStateTable(s string) *FlowUpdateOne {
	fuo.mutation.SetStateTable(s)
	return fuo
}

// SetInitialState sets the initialState field.
func (fuo *FlowUpdateOne) SetInitialState(u uuid.UUID) *FlowUpdateOne {
	fuo.mutation.SetInitialState(u)
	return fuo
}

// SetTerminationState sets the terminationState field.
func (fuo *FlowUpdateOne) SetTerminationState(u uuid.UUID) *FlowUpdateOne {
	fuo.mutation.SetTerminationState(u)
	return fuo
}

// SetPastState sets the pastState field.
func (fuo *FlowUpdateOne) SetPastState(u uuid.UUID) *FlowUpdateOne {
	fuo.mutation.SetPastState(u)
	return fuo
}

// ClearPastState clears the value of pastState.
func (fuo *FlowUpdateOne) ClearPastState() *FlowUpdateOne {
	fuo.mutation.ClearPastState()
	return fuo
}

// SetSurveyID sets the survey edge to Survey by id.
func (fuo *FlowUpdateOne) SetSurveyID(id uuid.UUID) *FlowUpdateOne {
	fuo.mutation.SetSurveyID(id)
	return fuo
}

// SetNillableSurveyID sets the survey edge to Survey by id if the given value is not nil.
func (fuo *FlowUpdateOne) SetNillableSurveyID(id *uuid.UUID) *FlowUpdateOne {
	if id != nil {
		fuo = fuo.SetSurveyID(*id)
	}
	return fuo
}

// SetSurvey sets the survey edge to Survey.
func (fuo *FlowUpdateOne) SetSurvey(s *Survey) *FlowUpdateOne {
	return fuo.SetSurveyID(s.ID)
}

// AddQuestionIDs adds the questions edge to Question by ids.
func (fuo *FlowUpdateOne) AddQuestionIDs(ids ...uuid.UUID) *FlowUpdateOne {
	fuo.mutation.AddQuestionIDs(ids...)
	return fuo
}

// AddQuestions adds the questions edges to Question.
func (fuo *FlowUpdateOne) AddQuestions(q ...*Question) *FlowUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.AddQuestionIDs(ids...)
}

// ClearSurvey clears the survey edge to Survey.
func (fuo *FlowUpdateOne) ClearSurvey() *FlowUpdateOne {
	fuo.mutation.ClearSurvey()
	return fuo
}

// RemoveQuestionIDs removes the questions edge to Question by ids.
func (fuo *FlowUpdateOne) RemoveQuestionIDs(ids ...uuid.UUID) *FlowUpdateOne {
	fuo.mutation.RemoveQuestionIDs(ids...)
	return fuo
}

// RemoveQuestions removes questions edges to Question.
func (fuo *FlowUpdateOne) RemoveQuestions(q ...*Question) *FlowUpdateOne {
	ids := make([]uuid.UUID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FlowUpdateOne) Save(ctx context.Context) (*Flow, error) {
	if v, ok := fuo.mutation.StateTable(); ok {
		if err := flow.StateTableValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"stateTable\": %v", err)
		}
	}

	var (
		err  error
		node *Flow
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FlowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlowUpdateOne) SaveX(ctx context.Context) *Flow {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FlowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FlowUpdateOne) sqlSave(ctx context.Context) (f *Flow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flow.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Flow.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldState,
		})
	}
	if value, ok := fuo.mutation.StateTable(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: flow.FieldStateTable,
		})
	}
	if value, ok := fuo.mutation.InitialState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldInitialState,
		})
	}
	if value, ok := fuo.mutation.TerminationState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldTerminationState,
		})
	}
	if value, ok := fuo.mutation.PastState(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: flow.FieldPastState,
		})
	}
	if fuo.mutation.PastStateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Column: flow.FieldPastState,
		})
	}
	if fuo.mutation.InputsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldInputs,
		})
	}
	if fuo.mutation.SurveyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flow.SurveyTable,
			Columns: []string{flow.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.SurveyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   flow.SurveyTable,
			Columns: []string{flow.SurveyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := fuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Flow{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
