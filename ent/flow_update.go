// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/question"
	"github.com/rs/xid"
)

// FlowUpdate is the builder for updating Flow entities.
type FlowUpdate struct {
	config
	state      *xid.ID
	stateTable *string

	clearinputs      bool
	questions        map[xid.ID]struct{}
	removedQuestions map[xid.ID]struct{}
	predicates       []predicate.Flow
}

// Where adds a new predicate for the builder.
func (fu *FlowUpdate) Where(ps ...predicate.Flow) *FlowUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetState sets the state field.
func (fu *FlowUpdate) SetState(x xid.ID) *FlowUpdate {
	fu.state = &x
	return fu
}

// SetStateTable sets the stateTable field.
func (fu *FlowUpdate) SetStateTable(s string) *FlowUpdate {
	fu.stateTable = &s
	return fu
}

// AddQuestionIDs adds the questions edge to Question by ids.
func (fu *FlowUpdate) AddQuestionIDs(ids ...xid.ID) *FlowUpdate {
	if fu.questions == nil {
		fu.questions = make(map[xid.ID]struct{})
	}
	for i := range ids {
		fu.questions[ids[i]] = struct{}{}
	}
	return fu
}

// AddQuestions adds the questions edges to Question.
func (fu *FlowUpdate) AddQuestions(q ...*Question) *FlowUpdate {
	ids := make([]xid.ID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.AddQuestionIDs(ids...)
}

// RemoveQuestionIDs removes the questions edge to Question by ids.
func (fu *FlowUpdate) RemoveQuestionIDs(ids ...xid.ID) *FlowUpdate {
	if fu.removedQuestions == nil {
		fu.removedQuestions = make(map[xid.ID]struct{})
	}
	for i := range ids {
		fu.removedQuestions[ids[i]] = struct{}{}
	}
	return fu
}

// RemoveQuestions removes questions edges to Question.
func (fu *FlowUpdate) RemoveQuestions(q ...*Question) *FlowUpdate {
	ids := make([]xid.ID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FlowUpdate) Save(ctx context.Context) (int, error) {
	if fu.stateTable != nil {
		if err := flow.StateTableValidator(*fu.stateTable); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"stateTable\": %v", err)
		}
	}
	return fu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FlowUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FlowUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FlowUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FlowUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: flow.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := fu.state; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  *value,
			Column: flow.FieldState,
		})
	}
	if value := fu.stateTable; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: flow.FieldStateTable,
		})
	}
	if fu.clearinputs {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldInputs,
		})
	}
	if nodes := fu.removedQuestions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.questions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FlowUpdateOne is the builder for updating a single Flow entity.
type FlowUpdateOne struct {
	config
	id         xid.ID
	state      *xid.ID
	stateTable *string

	clearinputs      bool
	questions        map[xid.ID]struct{}
	removedQuestions map[xid.ID]struct{}
}

// SetState sets the state field.
func (fuo *FlowUpdateOne) SetState(x xid.ID) *FlowUpdateOne {
	fuo.state = &x
	return fuo
}

// SetStateTable sets the stateTable field.
func (fuo *FlowUpdateOne) SetStateTable(s string) *FlowUpdateOne {
	fuo.stateTable = &s
	return fuo
}

// AddQuestionIDs adds the questions edge to Question by ids.
func (fuo *FlowUpdateOne) AddQuestionIDs(ids ...xid.ID) *FlowUpdateOne {
	if fuo.questions == nil {
		fuo.questions = make(map[xid.ID]struct{})
	}
	for i := range ids {
		fuo.questions[ids[i]] = struct{}{}
	}
	return fuo
}

// AddQuestions adds the questions edges to Question.
func (fuo *FlowUpdateOne) AddQuestions(q ...*Question) *FlowUpdateOne {
	ids := make([]xid.ID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.AddQuestionIDs(ids...)
}

// RemoveQuestionIDs removes the questions edge to Question by ids.
func (fuo *FlowUpdateOne) RemoveQuestionIDs(ids ...xid.ID) *FlowUpdateOne {
	if fuo.removedQuestions == nil {
		fuo.removedQuestions = make(map[xid.ID]struct{})
	}
	for i := range ids {
		fuo.removedQuestions[ids[i]] = struct{}{}
	}
	return fuo
}

// RemoveQuestions removes questions edges to Question.
func (fuo *FlowUpdateOne) RemoveQuestions(q ...*Question) *FlowUpdateOne {
	ids := make([]xid.ID, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fuo.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FlowUpdateOne) Save(ctx context.Context) (*Flow, error) {
	if fuo.stateTable != nil {
		if err := flow.StateTableValidator(*fuo.stateTable); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"stateTable\": %v", err)
		}
	}
	return fuo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FlowUpdateOne) SaveX(ctx context.Context) *Flow {
	f, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return f
}

// Exec executes the query on the entity.
func (fuo *FlowUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FlowUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FlowUpdateOne) sqlSave(ctx context.Context) (f *Flow, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   flow.Table,
			Columns: flow.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  fuo.id,
				Type:   field.TypeUUID,
				Column: flow.FieldID,
			},
		},
	}
	if value := fuo.state; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  *value,
			Column: flow.FieldState,
		})
	}
	if value := fuo.stateTable; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: flow.FieldStateTable,
		})
	}
	if fuo.clearinputs {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: flow.FieldInputs,
		})
	}
	if nodes := fuo.removedQuestions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.questions; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   flow.QuestionsTable,
			Columns: []string{flow.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	f = &Flow{config: fuo.config}
	_spec.Assign = f.assignValues
	_spec.ScanValues = f.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{flow.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return f, nil
}
