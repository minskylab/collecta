// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/account"
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/survey"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	name            *string
	lastActivity    *time.Time
	username        *string
	clearusername   bool
	picture         *string
	clearpicture    bool
	roles           *[]string
	clearroles      bool
	accounts        map[uuid.UUID]struct{}
	contacts        map[uuid.UUID]struct{}
	surveys         map[uuid.UUID]struct{}
	domains         map[uuid.UUID]struct{}
	adminOf         map[uuid.UUID]struct{}
	removedAccounts map[uuid.UUID]struct{}
	removedContacts map[uuid.UUID]struct{}
	removedSurveys  map[uuid.UUID]struct{}
	removedDomains  map[uuid.UUID]struct{}
	removedAdminOf  map[uuid.UUID]struct{}
	predicates      []predicate.Person
}

// Where adds a new predicate for the builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetName sets the name field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.name = &s
	return pu
}

// SetLastActivity sets the lastActivity field.
func (pu *PersonUpdate) SetLastActivity(t time.Time) *PersonUpdate {
	pu.lastActivity = &t
	return pu
}

// SetNillableLastActivity sets the lastActivity field if the given value is not nil.
func (pu *PersonUpdate) SetNillableLastActivity(t *time.Time) *PersonUpdate {
	if t != nil {
		pu.SetLastActivity(*t)
	}
	return pu
}

// SetUsername sets the username field.
func (pu *PersonUpdate) SetUsername(s string) *PersonUpdate {
	pu.username = &s
	return pu
}

// SetNillableUsername sets the username field if the given value is not nil.
func (pu *PersonUpdate) SetNillableUsername(s *string) *PersonUpdate {
	if s != nil {
		pu.SetUsername(*s)
	}
	return pu
}

// ClearUsername clears the value of username.
func (pu *PersonUpdate) ClearUsername() *PersonUpdate {
	pu.username = nil
	pu.clearusername = true
	return pu
}

// SetPicture sets the picture field.
func (pu *PersonUpdate) SetPicture(s string) *PersonUpdate {
	pu.picture = &s
	return pu
}

// SetNillablePicture sets the picture field if the given value is not nil.
func (pu *PersonUpdate) SetNillablePicture(s *string) *PersonUpdate {
	if s != nil {
		pu.SetPicture(*s)
	}
	return pu
}

// ClearPicture clears the value of picture.
func (pu *PersonUpdate) ClearPicture() *PersonUpdate {
	pu.picture = nil
	pu.clearpicture = true
	return pu
}

// SetRoles sets the roles field.
func (pu *PersonUpdate) SetRoles(s []string) *PersonUpdate {
	pu.roles = &s
	return pu
}

// ClearRoles clears the value of roles.
func (pu *PersonUpdate) ClearRoles() *PersonUpdate {
	pu.roles = nil
	pu.clearroles = true
	return pu
}

// AddAccountIDs adds the accounts edge to Account by ids.
func (pu *PersonUpdate) AddAccountIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.accounts == nil {
		pu.accounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.accounts[ids[i]] = struct{}{}
	}
	return pu
}

// AddAccounts adds the accounts edges to Account.
func (pu *PersonUpdate) AddAccounts(a ...*Account) *PersonUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddAccountIDs(ids...)
}

// AddContactIDs adds the contacts edge to Contact by ids.
func (pu *PersonUpdate) AddContactIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.contacts == nil {
		pu.contacts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.contacts[ids[i]] = struct{}{}
	}
	return pu
}

// AddContacts adds the contacts edges to Contact.
func (pu *PersonUpdate) AddContacts(c ...*Contact) *PersonUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddContactIDs(ids...)
}

// AddSurveyIDs adds the surveys edge to Survey by ids.
func (pu *PersonUpdate) AddSurveyIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.surveys == nil {
		pu.surveys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.surveys[ids[i]] = struct{}{}
	}
	return pu
}

// AddSurveys adds the surveys edges to Survey.
func (pu *PersonUpdate) AddSurveys(s ...*Survey) *PersonUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.AddSurveyIDs(ids...)
}

// AddDomainIDs adds the domains edge to Domain by ids.
func (pu *PersonUpdate) AddDomainIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.domains == nil {
		pu.domains = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.domains[ids[i]] = struct{}{}
	}
	return pu
}

// AddDomains adds the domains edges to Domain.
func (pu *PersonUpdate) AddDomains(d ...*Domain) *PersonUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddDomainIDs(ids...)
}

// AddAdminOfIDs adds the adminOf edge to Domain by ids.
func (pu *PersonUpdate) AddAdminOfIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.adminOf == nil {
		pu.adminOf = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.adminOf[ids[i]] = struct{}{}
	}
	return pu
}

// AddAdminOf adds the adminOf edges to Domain.
func (pu *PersonUpdate) AddAdminOf(d ...*Domain) *PersonUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddAdminOfIDs(ids...)
}

// RemoveAccountIDs removes the accounts edge to Account by ids.
func (pu *PersonUpdate) RemoveAccountIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.removedAccounts == nil {
		pu.removedAccounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.removedAccounts[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveAccounts removes accounts edges to Account.
func (pu *PersonUpdate) RemoveAccounts(a ...*Account) *PersonUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemoveAccountIDs(ids...)
}

// RemoveContactIDs removes the contacts edge to Contact by ids.
func (pu *PersonUpdate) RemoveContactIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.removedContacts == nil {
		pu.removedContacts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.removedContacts[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveContacts removes contacts edges to Contact.
func (pu *PersonUpdate) RemoveContacts(c ...*Contact) *PersonUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveContactIDs(ids...)
}

// RemoveSurveyIDs removes the surveys edge to Survey by ids.
func (pu *PersonUpdate) RemoveSurveyIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.removedSurveys == nil {
		pu.removedSurveys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.removedSurveys[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveSurveys removes surveys edges to Survey.
func (pu *PersonUpdate) RemoveSurveys(s ...*Survey) *PersonUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pu.RemoveSurveyIDs(ids...)
}

// RemoveDomainIDs removes the domains edge to Domain by ids.
func (pu *PersonUpdate) RemoveDomainIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.removedDomains == nil {
		pu.removedDomains = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.removedDomains[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveDomains removes domains edges to Domain.
func (pu *PersonUpdate) RemoveDomains(d ...*Domain) *PersonUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveDomainIDs(ids...)
}

// RemoveAdminOfIDs removes the adminOf edge to Domain by ids.
func (pu *PersonUpdate) RemoveAdminOfIDs(ids ...uuid.UUID) *PersonUpdate {
	if pu.removedAdminOf == nil {
		pu.removedAdminOf = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		pu.removedAdminOf[ids[i]] = struct{}{}
	}
	return pu
}

// RemoveAdminOf removes adminOf edges to Domain.
func (pu *PersonUpdate) RemoveAdminOf(d ...*Domain) *PersonUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemoveAdminOfIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	if pu.name != nil {
		if err := person.NameValidator(*pu.name); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	return pu.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := pu.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldName,
		})
	}
	if value := pu.lastActivity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: person.FieldLastActivity,
		})
	}
	if value := pu.username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldUsername,
		})
	}
	if pu.clearusername {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldUsername,
		})
	}
	if value := pu.picture; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldPicture,
		})
	}
	if pu.clearpicture {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPicture,
		})
	}
	if value := pu.roles; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: person.FieldRoles,
		})
	}
	if pu.clearroles {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldRoles,
		})
	}
	if nodes := pu.removedAccounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AccountsTable,
			Columns: []string{person.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.accounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AccountsTable,
			Columns: []string{person.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedContacts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: []string{person.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.contacts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: []string{person.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedSurveys; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.SurveysTable,
			Columns: []string{person.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.surveys; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.SurveysTable,
			Columns: []string{person.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedDomains; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.DomainsTable,
			Columns: person.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.domains; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.DomainsTable,
			Columns: person.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := pu.removedAdminOf; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AdminOfTable,
			Columns: person.AdminOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.adminOf; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AdminOfTable,
			Columns: person.AdminOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	id              uuid.UUID
	name            *string
	lastActivity    *time.Time
	username        *string
	clearusername   bool
	picture         *string
	clearpicture    bool
	roles           *[]string
	clearroles      bool
	accounts        map[uuid.UUID]struct{}
	contacts        map[uuid.UUID]struct{}
	surveys         map[uuid.UUID]struct{}
	domains         map[uuid.UUID]struct{}
	adminOf         map[uuid.UUID]struct{}
	removedAccounts map[uuid.UUID]struct{}
	removedContacts map[uuid.UUID]struct{}
	removedSurveys  map[uuid.UUID]struct{}
	removedDomains  map[uuid.UUID]struct{}
	removedAdminOf  map[uuid.UUID]struct{}
}

// SetName sets the name field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.name = &s
	return puo
}

// SetLastActivity sets the lastActivity field.
func (puo *PersonUpdateOne) SetLastActivity(t time.Time) *PersonUpdateOne {
	puo.lastActivity = &t
	return puo
}

// SetNillableLastActivity sets the lastActivity field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableLastActivity(t *time.Time) *PersonUpdateOne {
	if t != nil {
		puo.SetLastActivity(*t)
	}
	return puo
}

// SetUsername sets the username field.
func (puo *PersonUpdateOne) SetUsername(s string) *PersonUpdateOne {
	puo.username = &s
	return puo
}

// SetNillableUsername sets the username field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillableUsername(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetUsername(*s)
	}
	return puo
}

// ClearUsername clears the value of username.
func (puo *PersonUpdateOne) ClearUsername() *PersonUpdateOne {
	puo.username = nil
	puo.clearusername = true
	return puo
}

// SetPicture sets the picture field.
func (puo *PersonUpdateOne) SetPicture(s string) *PersonUpdateOne {
	puo.picture = &s
	return puo
}

// SetNillablePicture sets the picture field if the given value is not nil.
func (puo *PersonUpdateOne) SetNillablePicture(s *string) *PersonUpdateOne {
	if s != nil {
		puo.SetPicture(*s)
	}
	return puo
}

// ClearPicture clears the value of picture.
func (puo *PersonUpdateOne) ClearPicture() *PersonUpdateOne {
	puo.picture = nil
	puo.clearpicture = true
	return puo
}

// SetRoles sets the roles field.
func (puo *PersonUpdateOne) SetRoles(s []string) *PersonUpdateOne {
	puo.roles = &s
	return puo
}

// ClearRoles clears the value of roles.
func (puo *PersonUpdateOne) ClearRoles() *PersonUpdateOne {
	puo.roles = nil
	puo.clearroles = true
	return puo
}

// AddAccountIDs adds the accounts edge to Account by ids.
func (puo *PersonUpdateOne) AddAccountIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.accounts == nil {
		puo.accounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.accounts[ids[i]] = struct{}{}
	}
	return puo
}

// AddAccounts adds the accounts edges to Account.
func (puo *PersonUpdateOne) AddAccounts(a ...*Account) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddAccountIDs(ids...)
}

// AddContactIDs adds the contacts edge to Contact by ids.
func (puo *PersonUpdateOne) AddContactIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.contacts == nil {
		puo.contacts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.contacts[ids[i]] = struct{}{}
	}
	return puo
}

// AddContacts adds the contacts edges to Contact.
func (puo *PersonUpdateOne) AddContacts(c ...*Contact) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddContactIDs(ids...)
}

// AddSurveyIDs adds the surveys edge to Survey by ids.
func (puo *PersonUpdateOne) AddSurveyIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.surveys == nil {
		puo.surveys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.surveys[ids[i]] = struct{}{}
	}
	return puo
}

// AddSurveys adds the surveys edges to Survey.
func (puo *PersonUpdateOne) AddSurveys(s ...*Survey) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.AddSurveyIDs(ids...)
}

// AddDomainIDs adds the domains edge to Domain by ids.
func (puo *PersonUpdateOne) AddDomainIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.domains == nil {
		puo.domains = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.domains[ids[i]] = struct{}{}
	}
	return puo
}

// AddDomains adds the domains edges to Domain.
func (puo *PersonUpdateOne) AddDomains(d ...*Domain) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddDomainIDs(ids...)
}

// AddAdminOfIDs adds the adminOf edge to Domain by ids.
func (puo *PersonUpdateOne) AddAdminOfIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.adminOf == nil {
		puo.adminOf = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.adminOf[ids[i]] = struct{}{}
	}
	return puo
}

// AddAdminOf adds the adminOf edges to Domain.
func (puo *PersonUpdateOne) AddAdminOf(d ...*Domain) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddAdminOfIDs(ids...)
}

// RemoveAccountIDs removes the accounts edge to Account by ids.
func (puo *PersonUpdateOne) RemoveAccountIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.removedAccounts == nil {
		puo.removedAccounts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.removedAccounts[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveAccounts removes accounts edges to Account.
func (puo *PersonUpdateOne) RemoveAccounts(a ...*Account) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemoveAccountIDs(ids...)
}

// RemoveContactIDs removes the contacts edge to Contact by ids.
func (puo *PersonUpdateOne) RemoveContactIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.removedContacts == nil {
		puo.removedContacts = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.removedContacts[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveContacts removes contacts edges to Contact.
func (puo *PersonUpdateOne) RemoveContacts(c ...*Contact) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveContactIDs(ids...)
}

// RemoveSurveyIDs removes the surveys edge to Survey by ids.
func (puo *PersonUpdateOne) RemoveSurveyIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.removedSurveys == nil {
		puo.removedSurveys = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.removedSurveys[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveSurveys removes surveys edges to Survey.
func (puo *PersonUpdateOne) RemoveSurveys(s ...*Survey) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return puo.RemoveSurveyIDs(ids...)
}

// RemoveDomainIDs removes the domains edge to Domain by ids.
func (puo *PersonUpdateOne) RemoveDomainIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.removedDomains == nil {
		puo.removedDomains = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.removedDomains[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveDomains removes domains edges to Domain.
func (puo *PersonUpdateOne) RemoveDomains(d ...*Domain) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveDomainIDs(ids...)
}

// RemoveAdminOfIDs removes the adminOf edge to Domain by ids.
func (puo *PersonUpdateOne) RemoveAdminOfIDs(ids ...uuid.UUID) *PersonUpdateOne {
	if puo.removedAdminOf == nil {
		puo.removedAdminOf = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		puo.removedAdminOf[ids[i]] = struct{}{}
	}
	return puo
}

// RemoveAdminOf removes adminOf edges to Domain.
func (puo *PersonUpdateOne) RemoveAdminOf(d ...*Domain) *PersonUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemoveAdminOfIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	if puo.name != nil {
		if err := person.NameValidator(*puo.name); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	return puo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	pe, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pe
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (pe *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  puo.id,
				Type:   field.TypeUUID,
				Column: person.FieldID,
			},
		},
	}
	if value := puo.name; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldName,
		})
	}
	if value := puo.lastActivity; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: person.FieldLastActivity,
		})
	}
	if value := puo.username; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldUsername,
		})
	}
	if puo.clearusername {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldUsername,
		})
	}
	if value := puo.picture; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: person.FieldPicture,
		})
	}
	if puo.clearpicture {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: person.FieldPicture,
		})
	}
	if value := puo.roles; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: person.FieldRoles,
		})
	}
	if puo.clearroles {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: person.FieldRoles,
		})
	}
	if nodes := puo.removedAccounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AccountsTable,
			Columns: []string{person.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.accounts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AccountsTable,
			Columns: []string{person.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedContacts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: []string{person.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.contacts; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: []string{person.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedSurveys; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.SurveysTable,
			Columns: []string{person.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.surveys; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.SurveysTable,
			Columns: []string{person.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedDomains; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.DomainsTable,
			Columns: person.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.domains; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.DomainsTable,
			Columns: person.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := puo.removedAdminOf; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AdminOfTable,
			Columns: person.AdminOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.adminOf; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AdminOfTable,
			Columns: person.AdminOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pe = &Person{config: puo.config}
	_spec.Assign = pe.assignValues
	_spec.ScanValues = pe.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pe, nil
}
