// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/question"
)

// Input is the model entity for the Input schema.
type Input struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind input.Kind `json:"kind,omitempty"`
	// Multiple holds the value of the "multiple" field.
	Multiple bool `json:"multiple,omitempty"`
	// Defaults holds the value of the "defaults" field.
	Defaults []string `json:"defaults,omitempty"`
	// Options holds the value of the "options" field.
	Options map[string]interface{} `json:"options,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InputQuery when eager-loading is set.
	Edges          InputEdges `json:"edges"`
	question_input *uuid.UUID
}

// InputEdges holds the relations/edges for other nodes in the graph.
type InputEdges struct {
	// Question holds the value of the question edge.
	Question *Question
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InputEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Input) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // kind
		&sql.NullBool{},   // multiple
		&[]byte{},         // defaults
		&[]byte{},         // options
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Input) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // question_input
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Input fields.
func (i *Input) assignValues(values ...interface{}) error {
	if m, n := len(values), len(input.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		i.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field kind", values[0])
	} else if value.Valid {
		i.Kind = input.Kind(value.String)
	}
	if value, ok := values[1].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field multiple", values[1])
	} else if value.Valid {
		i.Multiple = value.Bool
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field defaults", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &i.Defaults); err != nil {
			return fmt.Errorf("unmarshal field defaults: %v", err)
		}
	}

	if value, ok := values[3].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field options", values[3])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &i.Options); err != nil {
			return fmt.Errorf("unmarshal field options: %v", err)
		}
	}
	values = values[4:]
	if len(values) == len(input.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field question_input", values[0])
		} else if value != nil {
			i.question_input = value
		}
	}
	return nil
}

// QueryQuestion queries the question edge of the Input.
func (i *Input) QueryQuestion() *QuestionQuery {
	return (&InputClient{config: i.config}).QueryQuestion(i)
}

// Update returns a builder for updating this Input.
// Note that, you need to call Input.Unwrap() before calling this method, if this Input
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Input) Update() *InputUpdateOne {
	return (&InputClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Input) Unwrap() *Input {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Input is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Input) String() string {
	var builder strings.Builder
	builder.WriteString("Input(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", i.Kind))
	builder.WriteString(", multiple=")
	builder.WriteString(fmt.Sprintf("%v", i.Multiple))
	builder.WriteString(", defaults=")
	builder.WriteString(fmt.Sprintf("%v", i.Defaults))
	builder.WriteString(", options=")
	builder.WriteString(fmt.Sprintf("%v", i.Options))
	builder.WriteByte(')')
	return builder.String()
}

// Inputs is a parsable slice of Input.
type Inputs []*Input

func (i Inputs) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
