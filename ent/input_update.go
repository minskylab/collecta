// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/question"
	"github.com/minskylab/collecta/uuid"
)

// InputUpdate is the builder for updating Input entities.
type InputUpdate struct {
	config
	hooks      []Hook
	mutation   *InputMutation
	predicates []predicate.Input
}

// Where adds a new predicate for the builder.
func (iu *InputUpdate) Where(ps ...predicate.Input) *InputUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetMultiple sets the multiple field.
func (iu *InputUpdate) SetMultiple(b bool) *InputUpdate {
	iu.mutation.SetMultiple(b)
	return iu
}

// SetNillableMultiple sets the multiple field if the given value is not nil.
func (iu *InputUpdate) SetNillableMultiple(b *bool) *InputUpdate {
	if b != nil {
		iu.SetMultiple(*b)
	}
	return iu
}

// ClearMultiple clears the value of multiple.
func (iu *InputUpdate) ClearMultiple() *InputUpdate {
	iu.mutation.ClearMultiple()
	return iu
}

// SetDefaults sets the defaults field.
func (iu *InputUpdate) SetDefaults(s []string) *InputUpdate {
	iu.mutation.SetDefaults(s)
	return iu
}

// ClearDefaults clears the value of defaults.
func (iu *InputUpdate) ClearDefaults() *InputUpdate {
	iu.mutation.ClearDefaults()
	return iu
}

// SetOptions sets the options field.
func (iu *InputUpdate) SetOptions(m map[string]interface{}) *InputUpdate {
	iu.mutation.SetOptions(m)
	return iu
}

// ClearOptions clears the value of options.
func (iu *InputUpdate) ClearOptions() *InputUpdate {
	iu.mutation.ClearOptions()
	return iu
}

// SetQuestionID sets the question edge to Question by id.
func (iu *InputUpdate) SetQuestionID(id uuid.UUID) *InputUpdate {
	iu.mutation.SetQuestionID(id)
	return iu
}

// SetQuestion sets the question edge to Question.
func (iu *InputUpdate) SetQuestion(q *Question) *InputUpdate {
	return iu.SetQuestionID(q.ID)
}

// ClearQuestion clears the question edge to Question.
func (iu *InputUpdate) ClearQuestion() *InputUpdate {
	iu.mutation.ClearQuestion()
	return iu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *InputUpdate) Save(ctx context.Context) (int, error) {

	if _, ok := iu.mutation.QuestionID(); iu.mutation.QuestionCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"question\"")
	}
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InputMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InputUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InputUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InputUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InputUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   input.Table,
			Columns: input.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: input.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Multiple(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: input.FieldMultiple,
		})
	}
	if iu.mutation.MultipleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: input.FieldMultiple,
		})
	}
	if value, ok := iu.mutation.Defaults(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldDefaults,
		})
	}
	if iu.mutation.DefaultsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: input.FieldDefaults,
		})
	}
	if value, ok := iu.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldOptions,
		})
	}
	if iu.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: input.FieldOptions,
		})
	}
	if iu.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   input.QuestionTable,
			Columns: []string{input.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   input.QuestionTable,
			Columns: []string{input.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{input.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InputUpdateOne is the builder for updating a single Input entity.
type InputUpdateOne struct {
	config
	hooks    []Hook
	mutation *InputMutation
}

// SetMultiple sets the multiple field.
func (iuo *InputUpdateOne) SetMultiple(b bool) *InputUpdateOne {
	iuo.mutation.SetMultiple(b)
	return iuo
}

// SetNillableMultiple sets the multiple field if the given value is not nil.
func (iuo *InputUpdateOne) SetNillableMultiple(b *bool) *InputUpdateOne {
	if b != nil {
		iuo.SetMultiple(*b)
	}
	return iuo
}

// ClearMultiple clears the value of multiple.
func (iuo *InputUpdateOne) ClearMultiple() *InputUpdateOne {
	iuo.mutation.ClearMultiple()
	return iuo
}

// SetDefaults sets the defaults field.
func (iuo *InputUpdateOne) SetDefaults(s []string) *InputUpdateOne {
	iuo.mutation.SetDefaults(s)
	return iuo
}

// ClearDefaults clears the value of defaults.
func (iuo *InputUpdateOne) ClearDefaults() *InputUpdateOne {
	iuo.mutation.ClearDefaults()
	return iuo
}

// SetOptions sets the options field.
func (iuo *InputUpdateOne) SetOptions(m map[string]interface{}) *InputUpdateOne {
	iuo.mutation.SetOptions(m)
	return iuo
}

// ClearOptions clears the value of options.
func (iuo *InputUpdateOne) ClearOptions() *InputUpdateOne {
	iuo.mutation.ClearOptions()
	return iuo
}

// SetQuestionID sets the question edge to Question by id.
func (iuo *InputUpdateOne) SetQuestionID(id uuid.UUID) *InputUpdateOne {
	iuo.mutation.SetQuestionID(id)
	return iuo
}

// SetQuestion sets the question edge to Question.
func (iuo *InputUpdateOne) SetQuestion(q *Question) *InputUpdateOne {
	return iuo.SetQuestionID(q.ID)
}

// ClearQuestion clears the question edge to Question.
func (iuo *InputUpdateOne) ClearQuestion() *InputUpdateOne {
	iuo.mutation.ClearQuestion()
	return iuo
}

// Save executes the query and returns the updated entity.
func (iuo *InputUpdateOne) Save(ctx context.Context) (*Input, error) {

	if _, ok := iuo.mutation.QuestionID(); iuo.mutation.QuestionCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"question\"")
	}
	var (
		err  error
		node *Input
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InputMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InputUpdateOne) SaveX(ctx context.Context) *Input {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *InputUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InputUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InputUpdateOne) sqlSave(ctx context.Context) (i *Input, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   input.Table,
			Columns: input.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: input.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Input.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.Multiple(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: input.FieldMultiple,
		})
	}
	if iuo.mutation.MultipleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: input.FieldMultiple,
		})
	}
	if value, ok := iuo.mutation.Defaults(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldDefaults,
		})
	}
	if iuo.mutation.DefaultsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: input.FieldDefaults,
		})
	}
	if value, ok := iuo.mutation.Options(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldOptions,
		})
	}
	if iuo.mutation.OptionsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: input.FieldOptions,
		})
	}
	if iuo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   input.QuestionTable,
			Columns: []string{input.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   input.QuestionTable,
			Columns: []string{input.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Input{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{input.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
