// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/question"
	"github.com/minskylab/collecta/ent/survey"

	"github.com/facebookincubator/ent/dialect/sql/schema"
	"github.com/facebookincubator/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"Google", "Anonymous", "Email"}},
		{Name: "sub", Type: field.TypeString},
		{Name: "remote_id", Type: field.TypeString, Unique: true},
		{Name: "secret", Type: field.TypeString, Nullable: true},
		{Name: "person_accounts", Type: field.TypeUUID, Nullable: true},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "accounts_persons_accounts",
				Columns: []*schema.Column{AccountsColumns[5]},

				RefColumns: []*schema.Column{PersonsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// AnswersColumns holds the columns for the "answers" table.
	AnswersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "at", Type: field.TypeTime},
		{Name: "responses", Type: field.TypeJSON},
		{Name: "valid", Type: field.TypeBool, Nullable: true},
		{Name: "question_answers", Type: field.TypeUUID, Nullable: true},
	}
	// AnswersTable holds the schema information for the "answers" table.
	AnswersTable = &schema.Table{
		Name:       "answers",
		Columns:    AnswersColumns,
		PrimaryKey: []*schema.Column{AnswersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "answers_questions_answers",
				Columns: []*schema.Column{AnswersColumns[4]},

				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ContactsColumns holds the columns for the "contacts" table.
	ContactsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"Email", "Phone"}, Default: contact.DefaultKind},
		{Name: "principal", Type: field.TypeBool},
		{Name: "validated", Type: field.TypeBool},
		{Name: "from_account", Type: field.TypeBool, Default: contact.DefaultFromAccount},
		{Name: "person_contacts", Type: field.TypeUUID, Nullable: true},
	}
	// ContactsTable holds the schema information for the "contacts" table.
	ContactsTable = &schema.Table{
		Name:       "contacts",
		Columns:    ContactsColumns,
		PrimaryKey: []*schema.Column{ContactsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "contacts_persons_contacts",
				Columns: []*schema.Column{ContactsColumns[7]},

				RefColumns: []*schema.Column{PersonsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DevicesColumns holds the columns for the "devices" table.
	DevicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "device", Type: field.TypeString},
	}
	// DevicesTable holds the schema information for the "devices" table.
	DevicesTable = &schema.Table{
		Name:        "devices",
		Columns:     DevicesColumns,
		PrimaryKey:  []*schema.Column{DevicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// DomainsColumns holds the columns for the "domains" table.
	DomainsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "domain", Type: field.TypeString, Unique: true},
		{Name: "collecta_domain", Type: field.TypeString},
		{Name: "collecta_client_callback", Type: field.TypeString},
		{Name: "tags", Type: field.TypeJSON},
	}
	// DomainsTable holds the schema information for the "domains" table.
	DomainsTable = &schema.Table{
		Name:        "domains",
		Columns:     DomainsColumns,
		PrimaryKey:  []*schema.Column{DomainsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// FlowsColumns holds the columns for the "flows" table.
	FlowsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "state", Type: field.TypeUUID},
		{Name: "state_table", Type: field.TypeString},
		{Name: "initial_state", Type: field.TypeUUID},
		{Name: "termination_state", Type: field.TypeUUID},
		{Name: "past_state", Type: field.TypeUUID, Nullable: true},
		{Name: "inputs", Type: field.TypeJSON, Nullable: true},
		{Name: "survey_flow", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// FlowsTable holds the schema information for the "flows" table.
	FlowsTable = &schema.Table{
		Name:       "flows",
		Columns:    FlowsColumns,
		PrimaryKey: []*schema.Column{FlowsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "flows_surveys_flow",
				Columns: []*schema.Column{FlowsColumns[7]},

				RefColumns: []*schema.Column{SurveysColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// IPsColumns holds the columns for the "i_ps" table.
	IPsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "ip", Type: field.TypeString},
	}
	// IPsTable holds the schema information for the "i_ps" table.
	IPsTable = &schema.Table{
		Name:        "i_ps",
		Columns:     IPsColumns,
		PrimaryKey:  []*schema.Column{IPsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// InputsColumns holds the columns for the "inputs" table.
	InputsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "kind", Type: field.TypeEnum, Enums: []string{"Text", "Options", "Satisfaction", "Boolean"}},
		{Name: "multiple", Type: field.TypeBool, Nullable: true, Default: input.DefaultMultiple},
		{Name: "defaults", Type: field.TypeJSON, Nullable: true},
		{Name: "options", Type: field.TypeJSON, Nullable: true},
		{Name: "question_input", Type: field.TypeUUID, Unique: true, Nullable: true},
	}
	// InputsTable holds the schema information for the "inputs" table.
	InputsTable = &schema.Table{
		Name:       "inputs",
		Columns:    InputsColumns,
		PrimaryKey: []*schema.Column{InputsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "inputs_questions_input",
				Columns: []*schema.Column{InputsColumns[5]},

				RefColumns: []*schema.Column{QuestionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PersonsColumns holds the columns for the "persons" table.
	PersonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString},
		{Name: "last_activity", Type: field.TypeTime},
		{Name: "username", Type: field.TypeString, Nullable: true},
		{Name: "picture", Type: field.TypeString, Nullable: true},
		{Name: "roles", Type: field.TypeJSON, Nullable: true},
	}
	// PersonsTable holds the schema information for the "persons" table.
	PersonsTable = &schema.Table{
		Name:        "persons",
		Columns:     PersonsColumns,
		PrimaryKey:  []*schema.Column{PersonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// QuestionsColumns holds the columns for the "questions" table.
	QuestionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "hash", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "validator", Type: field.TypeString, Nullable: true},
		{Name: "anonymous", Type: field.TypeBool, Default: question.DefaultAnonymous},
		{Name: "flow_questions", Type: field.TypeUUID, Nullable: true},
	}
	// QuestionsTable holds the schema information for the "questions" table.
	QuestionsTable = &schema.Table{
		Name:       "questions",
		Columns:    QuestionsColumns,
		PrimaryKey: []*schema.Column{QuestionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "questions_flows_questions",
				Columns: []*schema.Column{QuestionsColumns[7]},

				RefColumns: []*schema.Column{FlowsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ShortsColumns holds the columns for the "shorts" table.
	ShortsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString, Unique: true},
		{Name: "value", Type: field.TypeUUID},
	}
	// ShortsTable holds the schema information for the "shorts" table.
	ShortsTable = &schema.Table{
		Name:        "shorts",
		Columns:     ShortsColumns,
		PrimaryKey:  []*schema.Column{ShortsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// SurveysColumns holds the columns for the "surveys" table.
	SurveysColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "tags", Type: field.TypeJSON},
		{Name: "last_interaction", Type: field.TypeTime},
		{Name: "due_date", Type: field.TypeTime},
		{Name: "title", Type: field.TypeString},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "metadata", Type: field.TypeJSON, Nullable: true},
		{Name: "done", Type: field.TypeBool, Nullable: true, Default: survey.DefaultDone},
		{Name: "is_public", Type: field.TypeBool, Nullable: true, Default: survey.DefaultIsPublic},
		{Name: "domain_surveys", Type: field.TypeUUID, Nullable: true},
		{Name: "person_surveys", Type: field.TypeUUID, Nullable: true},
	}
	// SurveysTable holds the schema information for the "surveys" table.
	SurveysTable = &schema.Table{
		Name:       "surveys",
		Columns:    SurveysColumns,
		PrimaryKey: []*schema.Column{SurveysColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "surveys_domains_surveys",
				Columns: []*schema.Column{SurveysColumns[9]},

				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "surveys_persons_surveys",
				Columns: []*schema.Column{SurveysColumns[10]},

				RefColumns: []*schema.Column{PersonsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// DomainUsersColumns holds the columns for the "domain_users" table.
	DomainUsersColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeUUID},
		{Name: "person_id", Type: field.TypeUUID},
	}
	// DomainUsersTable holds the schema information for the "domain_users" table.
	DomainUsersTable = &schema.Table{
		Name:       "domain_users",
		Columns:    DomainUsersColumns,
		PrimaryKey: []*schema.Column{DomainUsersColumns[0], DomainUsersColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "domain_users_domain_id",
				Columns: []*schema.Column{DomainUsersColumns[0]},

				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "domain_users_person_id",
				Columns: []*schema.Column{DomainUsersColumns[1]},

				RefColumns: []*schema.Column{PersonsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// DomainAdminsColumns holds the columns for the "domain_admins" table.
	DomainAdminsColumns = []*schema.Column{
		{Name: "domain_id", Type: field.TypeUUID},
		{Name: "person_id", Type: field.TypeUUID},
	}
	// DomainAdminsTable holds the schema information for the "domain_admins" table.
	DomainAdminsTable = &schema.Table{
		Name:       "domain_admins",
		Columns:    DomainAdminsColumns,
		PrimaryKey: []*schema.Column{DomainAdminsColumns[0], DomainAdminsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "domain_admins_domain_id",
				Columns: []*schema.Column{DomainAdminsColumns[0]},

				RefColumns: []*schema.Column{DomainsColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:  "domain_admins_person_id",
				Columns: []*schema.Column{DomainAdminsColumns[1]},

				RefColumns: []*schema.Column{PersonsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		AnswersTable,
		ContactsTable,
		DevicesTable,
		DomainsTable,
		FlowsTable,
		IPsTable,
		InputsTable,
		PersonsTable,
		QuestionsTable,
		ShortsTable,
		SurveysTable,
		DomainUsersTable,
		DomainAdminsTable,
	}
)

func init() {
	AccountsTable.ForeignKeys[0].RefTable = PersonsTable
	AnswersTable.ForeignKeys[0].RefTable = QuestionsTable
	ContactsTable.ForeignKeys[0].RefTable = PersonsTable
	FlowsTable.ForeignKeys[0].RefTable = SurveysTable
	InputsTable.ForeignKeys[0].RefTable = QuestionsTable
	QuestionsTable.ForeignKeys[0].RefTable = FlowsTable
	SurveysTable.ForeignKeys[0].RefTable = DomainsTable
	SurveysTable.ForeignKeys[1].RefTable = PersonsTable
	DomainUsersTable.ForeignKeys[0].RefTable = DomainsTable
	DomainUsersTable.ForeignKeys[1].RefTable = PersonsTable
	DomainAdminsTable.ForeignKeys[0].RefTable = DomainsTable
	DomainAdminsTable.ForeignKeys[1].RefTable = PersonsTable
}
