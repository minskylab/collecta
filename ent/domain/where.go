// Code generated by entc, DO NOT EDIT.

package domain

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// Domain applies equality check predicate on the "domain" field. It's identical to DomainEQ.
func Domain(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// CollectaDomain applies equality check predicate on the "collectaDomain" field. It's identical to CollectaDomainEQ.
func CollectaDomain(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectaDomain), v))
	})
}

// CollectaClientCallback applies equality check predicate on the "collectaClientCallback" field. It's identical to CollectaClientCallbackEQ.
func CollectaClientCallback(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectaClientCallback), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEmail), v))
	})
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEmail), v))
	})
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEmail), v...))
	})
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEmail), v...))
	})
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEmail), v))
	})
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEmail), v))
	})
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEmail), v))
	})
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEmail), v))
	})
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEmail), v))
	})
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEmail), v))
	})
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEmail), v))
	})
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEmail), v))
	})
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEmail), v))
	})
}

// DomainEQ applies the EQ predicate on the "domain" field.
func DomainEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomain), v))
	})
}

// DomainNEQ applies the NEQ predicate on the "domain" field.
func DomainNEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomain), v))
	})
}

// DomainIn applies the In predicate on the "domain" field.
func DomainIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDomain), v...))
	})
}

// DomainNotIn applies the NotIn predicate on the "domain" field.
func DomainNotIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDomain), v...))
	})
}

// DomainGT applies the GT predicate on the "domain" field.
func DomainGT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomain), v))
	})
}

// DomainGTE applies the GTE predicate on the "domain" field.
func DomainGTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomain), v))
	})
}

// DomainLT applies the LT predicate on the "domain" field.
func DomainLT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomain), v))
	})
}

// DomainLTE applies the LTE predicate on the "domain" field.
func DomainLTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomain), v))
	})
}

// DomainContains applies the Contains predicate on the "domain" field.
func DomainContains(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomain), v))
	})
}

// DomainHasPrefix applies the HasPrefix predicate on the "domain" field.
func DomainHasPrefix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomain), v))
	})
}

// DomainHasSuffix applies the HasSuffix predicate on the "domain" field.
func DomainHasSuffix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomain), v))
	})
}

// DomainEqualFold applies the EqualFold predicate on the "domain" field.
func DomainEqualFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomain), v))
	})
}

// DomainContainsFold applies the ContainsFold predicate on the "domain" field.
func DomainContainsFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomain), v))
	})
}

// CollectaDomainEQ applies the EQ predicate on the "collectaDomain" field.
func CollectaDomainEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainNEQ applies the NEQ predicate on the "collectaDomain" field.
func CollectaDomainNEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainIn applies the In predicate on the "collectaDomain" field.
func CollectaDomainIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectaDomain), v...))
	})
}

// CollectaDomainNotIn applies the NotIn predicate on the "collectaDomain" field.
func CollectaDomainNotIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectaDomain), v...))
	})
}

// CollectaDomainGT applies the GT predicate on the "collectaDomain" field.
func CollectaDomainGT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainGTE applies the GTE predicate on the "collectaDomain" field.
func CollectaDomainGTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainLT applies the LT predicate on the "collectaDomain" field.
func CollectaDomainLT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainLTE applies the LTE predicate on the "collectaDomain" field.
func CollectaDomainLTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainContains applies the Contains predicate on the "collectaDomain" field.
func CollectaDomainContains(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainHasPrefix applies the HasPrefix predicate on the "collectaDomain" field.
func CollectaDomainHasPrefix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainHasSuffix applies the HasSuffix predicate on the "collectaDomain" field.
func CollectaDomainHasSuffix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainEqualFold applies the EqualFold predicate on the "collectaDomain" field.
func CollectaDomainEqualFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectaDomain), v))
	})
}

// CollectaDomainContainsFold applies the ContainsFold predicate on the "collectaDomain" field.
func CollectaDomainContainsFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectaDomain), v))
	})
}

// CollectaClientCallbackEQ applies the EQ predicate on the "collectaClientCallback" field.
func CollectaClientCallbackEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackNEQ applies the NEQ predicate on the "collectaClientCallback" field.
func CollectaClientCallbackNEQ(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackIn applies the In predicate on the "collectaClientCallback" field.
func CollectaClientCallbackIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollectaClientCallback), v...))
	})
}

// CollectaClientCallbackNotIn applies the NotIn predicate on the "collectaClientCallback" field.
func CollectaClientCallbackNotIn(vs ...string) predicate.Domain {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Domain(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollectaClientCallback), v...))
	})
}

// CollectaClientCallbackGT applies the GT predicate on the "collectaClientCallback" field.
func CollectaClientCallbackGT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackGTE applies the GTE predicate on the "collectaClientCallback" field.
func CollectaClientCallbackGTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackLT applies the LT predicate on the "collectaClientCallback" field.
func CollectaClientCallbackLT(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackLTE applies the LTE predicate on the "collectaClientCallback" field.
func CollectaClientCallbackLTE(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackContains applies the Contains predicate on the "collectaClientCallback" field.
func CollectaClientCallbackContains(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackHasPrefix applies the HasPrefix predicate on the "collectaClientCallback" field.
func CollectaClientCallbackHasPrefix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackHasSuffix applies the HasSuffix predicate on the "collectaClientCallback" field.
func CollectaClientCallbackHasSuffix(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackEqualFold applies the EqualFold predicate on the "collectaClientCallback" field.
func CollectaClientCallbackEqualFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollectaClientCallback), v))
	})
}

// CollectaClientCallbackContainsFold applies the ContainsFold predicate on the "collectaClientCallback" field.
func CollectaClientCallbackContainsFold(v string) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollectaClientCallback), v))
	})
}

// HasSurveys applies the HasEdge predicate on the "surveys" edge.
func HasSurveys() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SurveysTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSurveysWith applies the HasEdge predicate on the "surveys" edge with a given conditions (other predicates).
func HasSurveysWith(preds ...predicate.Survey) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SurveysInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SurveysTable, SurveysColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.Person) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UsersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAdmins applies the HasEdge predicate on the "admins" edge.
func HasAdmins() predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAdminsWith applies the HasEdge predicate on the "admins" edge with a given conditions (other predicates).
func HasAdminsWith(preds ...predicate.Person) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AdminsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, AdminsTable, AdminsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Domain) predicate.Domain {
	return predicate.Domain(func(s *sql.Selector) {
		p(s.Not())
	})
}
