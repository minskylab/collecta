// Code generated by entc, DO NOT EDIT.

package domain

const (
	// Label holds the string label denoting the domain type in the database.
	Label = "domain"
	// FieldID holds the string denoting the id field in the database.
	FieldID       = "id"       // FieldName holds the string denoting the name vertex property in the database.
	FieldName     = "name"     // FieldEmail holds the string denoting the email vertex property in the database.
	FieldEmail    = "email"    // FieldDomain holds the string denoting the domain vertex property in the database.
	FieldDomain   = "domain"   // FieldCallback holds the string denoting the callback vertex property in the database.
	FieldCallback = "callback" // FieldTags holds the string denoting the tags vertex property in the database.
	FieldTags     = "tags"

	// EdgeSurveys holds the string denoting the surveys edge name in mutations.
	EdgeSurveys = "surveys"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeAdmins holds the string denoting the admins edge name in mutations.
	EdgeAdmins = "admins"

	// Table holds the table name of the domain in the database.
	Table = "domains"
	// SurveysTable is the table the holds the surveys relation/edge.
	SurveysTable = "surveys"
	// SurveysInverseTable is the table name for the Survey entity.
	// It exists in this package in order to avoid circular dependency with the "survey" package.
	SurveysInverseTable = "surveys"
	// SurveysColumn is the table column denoting the surveys relation/edge.
	SurveysColumn = "domain_surveys"
	// UsersTable is the table the holds the users relation/edge. The primary key declared below.
	UsersTable = "domain_users"
	// UsersInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	UsersInverseTable = "persons"
	// AdminsTable is the table the holds the admins relation/edge. The primary key declared below.
	AdminsTable = "domain_admins"
	// AdminsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	AdminsInverseTable = "persons"
)

// Columns holds all SQL columns for domain fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldDomain,
	FieldCallback,
	FieldTags,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"domain_id", "person_id"}
	// AdminsPrimaryKey and AdminsColumn2 are the table columns denoting the
	// primary key for the admins relation (M2M).
	AdminsPrimaryKey = []string{"domain_id", "person_id"}
)

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
)
