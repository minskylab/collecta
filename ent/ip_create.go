// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/ip"
)

// IPCreate is the builder for creating a IP entity.
type IPCreate struct {
	config
}

// Save creates the IP in the database.
func (ic *IPCreate) Save(ctx context.Context) (*IP, error) {
	return ic.sqlSave(ctx)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IPCreate) SaveX(ctx context.Context) *IP {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *IPCreate) sqlSave(ctx context.Context) (*IP, error) {
	var (
		i     = &IP{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ip.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ip.FieldID,
			},
		}
	)
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}
