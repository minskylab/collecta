// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/shorts"
)

// ShortsDelete is the builder for deleting a Shorts entity.
type ShortsDelete struct {
	config
	predicates []predicate.Shorts
}

// Where adds a new predicate to the delete builder.
func (sd *ShortsDelete) Where(ps ...predicate.Shorts) *ShortsDelete {
	sd.predicates = append(sd.predicates, ps...)
	return sd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (sd *ShortsDelete) Exec(ctx context.Context) (int, error) {
	return sd.sqlExec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (sd *ShortsDelete) ExecX(ctx context.Context) int {
	n, err := sd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (sd *ShortsDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := &sqlgraph.DeleteSpec{
		Node: &sqlgraph.NodeSpec{
			Table: shorts.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: shorts.FieldID,
			},
		},
	}
	if ps := sd.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return sqlgraph.DeleteNodes(ctx, sd.driver, _spec)
}

// ShortsDeleteOne is the builder for deleting a single Shorts entity.
type ShortsDeleteOne struct {
	sd *ShortsDelete
}

// Exec executes the deletion query.
func (sdo *ShortsDeleteOne) Exec(ctx context.Context) error {
	n, err := sdo.sd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{shorts.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (sdo *ShortsDeleteOne) ExecX(ctx context.Context) {
	sdo.sd.ExecX(ctx)
}
