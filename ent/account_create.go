// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/account"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/uuid"
)

// AccountCreate is the builder for creating a Account entity.
type AccountCreate struct {
	config
	mutation *AccountMutation
	hooks    []Hook
}

// SetType sets the type field.
func (ac *AccountCreate) SetType(a account.Type) *AccountCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetSub sets the sub field.
func (ac *AccountCreate) SetSub(s string) *AccountCreate {
	ac.mutation.SetSub(s)
	return ac
}

// SetRemoteID sets the remoteID field.
func (ac *AccountCreate) SetRemoteID(s string) *AccountCreate {
	ac.mutation.SetRemoteID(s)
	return ac
}

// SetSecret sets the secret field.
func (ac *AccountCreate) SetSecret(s string) *AccountCreate {
	ac.mutation.SetSecret(s)
	return ac
}

// SetNillableSecret sets the secret field if the given value is not nil.
func (ac *AccountCreate) SetNillableSecret(s *string) *AccountCreate {
	if s != nil {
		ac.SetSecret(*s)
	}
	return ac
}

// SetID sets the id field.
func (ac *AccountCreate) SetID(u uuid.UUID) *AccountCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetOwnerID sets the owner edge to Person by id.
func (ac *AccountCreate) SetOwnerID(id uuid.UUID) *AccountCreate {
	ac.mutation.SetOwnerID(id)
	return ac
}

// SetNillableOwnerID sets the owner edge to Person by id if the given value is not nil.
func (ac *AccountCreate) SetNillableOwnerID(id *uuid.UUID) *AccountCreate {
	if id != nil {
		ac = ac.SetOwnerID(*id)
	}
	return ac
}

// SetOwner sets the owner edge to Person.
func (ac *AccountCreate) SetOwner(p *Person) *AccountCreate {
	return ac.SetOwnerID(p.ID)
}

// Save creates the Account in the database.
func (ac *AccountCreate) Save(ctx context.Context) (*Account, error) {
	if _, ok := ac.mutation.GetType(); !ok {
		return nil, errors.New("ent: missing required field \"type\"")
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := account.TypeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"type\": %v", err)
		}
	}
	if _, ok := ac.mutation.Sub(); !ok {
		return nil, errors.New("ent: missing required field \"sub\"")
	}
	if v, ok := ac.mutation.Sub(); ok {
		if err := account.SubValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"sub\": %v", err)
		}
	}
	if _, ok := ac.mutation.RemoteID(); !ok {
		return nil, errors.New("ent: missing required field \"remoteID\"")
	}
	var (
		err  error
		node *Account
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AccountMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AccountCreate) SaveX(ctx context.Context) *Account {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AccountCreate) sqlSave(ctx context.Context) (*Account, error) {
	var (
		a     = &Account{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: account.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: account.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		a.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: account.FieldType,
		})
		a.Type = value
	}
	if value, ok := ac.mutation.Sub(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSub,
		})
		a.Sub = value
	}
	if value, ok := ac.mutation.RemoteID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldRemoteID,
		})
		a.RemoteID = value
	}
	if value, ok := ac.mutation.Secret(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: account.FieldSecret,
		})
		a.Secret = value
	}
	if nodes := ac.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   account.OwnerTable,
			Columns: []string{account.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
