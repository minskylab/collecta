// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/input"
	"github.com/minskylab/collecta/ent/question"
	"github.com/minskylab/collecta/uuid"
)

// InputCreate is the builder for creating a Input entity.
type InputCreate struct {
	config
	mutation *InputMutation
	hooks    []Hook
}

// SetKind sets the kind field.
func (ic *InputCreate) SetKind(i input.Kind) *InputCreate {
	ic.mutation.SetKind(i)
	return ic
}

// SetMultiple sets the multiple field.
func (ic *InputCreate) SetMultiple(b bool) *InputCreate {
	ic.mutation.SetMultiple(b)
	return ic
}

// SetNillableMultiple sets the multiple field if the given value is not nil.
func (ic *InputCreate) SetNillableMultiple(b *bool) *InputCreate {
	if b != nil {
		ic.SetMultiple(*b)
	}
	return ic
}

// SetDefaults sets the defaults field.
func (ic *InputCreate) SetDefaults(s []string) *InputCreate {
	ic.mutation.SetDefaults(s)
	return ic
}

// SetOptions sets the options field.
func (ic *InputCreate) SetOptions(m map[string]interface{}) *InputCreate {
	ic.mutation.SetOptions(m)
	return ic
}

// SetID sets the id field.
func (ic *InputCreate) SetID(u uuid.UUID) *InputCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetQuestionID sets the question edge to Question by id.
func (ic *InputCreate) SetQuestionID(id uuid.UUID) *InputCreate {
	ic.mutation.SetQuestionID(id)
	return ic
}

// SetQuestion sets the question edge to Question.
func (ic *InputCreate) SetQuestion(q *Question) *InputCreate {
	return ic.SetQuestionID(q.ID)
}

// Save creates the Input in the database.
func (ic *InputCreate) Save(ctx context.Context) (*Input, error) {
	if _, ok := ic.mutation.Kind(); !ok {
		return nil, errors.New("ent: missing required field \"kind\"")
	}
	if v, ok := ic.mutation.Kind(); ok {
		if err := input.KindValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"kind\": %v", err)
		}
	}
	if _, ok := ic.mutation.Multiple(); !ok {
		v := input.DefaultMultiple
		ic.mutation.SetMultiple(v)
	}
	if _, ok := ic.mutation.QuestionID(); !ok {
		return nil, errors.New("ent: missing required edge \"question\"")
	}
	var (
		err  error
		node *Input
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InputMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InputCreate) SaveX(ctx context.Context) *Input {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InputCreate) sqlSave(ctx context.Context) (*Input, error) {
	var (
		i     = &Input{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: input.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: input.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		i.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Kind(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: input.FieldKind,
		})
		i.Kind = value
	}
	if value, ok := ic.mutation.Multiple(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: input.FieldMultiple,
		})
		i.Multiple = value
	}
	if value, ok := ic.mutation.Defaults(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldDefaults,
		})
		i.Defaults = value
	}
	if value, ok := ic.mutation.Options(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: input.FieldOptions,
		})
		i.Options = value
	}
	if nodes := ic.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   input.QuestionTable,
			Columns: []string{input.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
