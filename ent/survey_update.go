// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/minskylab/collecta/ent/survey"
	"github.com/minskylab/collecta/ent/user"
)

// SurveyUpdate is the builder for updating Survey entities.
type SurveyUpdate struct {
	config
	tags            *[]string
	lastInteraction *time.Time

	title            *string
	description      *string
	cleardescription bool
	metadata         *map[string]string
	clearmetadata    bool
	done             *bool
	cleardone        bool
	isPublic         *bool
	clearisPublic    bool
	flow             map[uuid.UUID]struct{}
	_for             map[uuid.UUID]struct{}
	owner            map[uuid.UUID]struct{}
	clearedFlow      bool
	clearedFor       bool
	clearedOwner     bool
	predicates       []predicate.Survey
}

// Where adds a new predicate for the builder.
func (su *SurveyUpdate) Where(ps ...predicate.Survey) *SurveyUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetTags sets the tags field.
func (su *SurveyUpdate) SetTags(s []string) *SurveyUpdate {
	su.tags = &s
	return su
}

// SetLastInteraction sets the lastInteraction field.
func (su *SurveyUpdate) SetLastInteraction(t time.Time) *SurveyUpdate {
	su.lastInteraction = &t
	return su
}

// SetTitle sets the title field.
func (su *SurveyUpdate) SetTitle(s string) *SurveyUpdate {
	su.title = &s
	return su
}

// SetDescription sets the description field.
func (su *SurveyUpdate) SetDescription(s string) *SurveyUpdate {
	su.description = &s
	return su
}

// SetNillableDescription sets the description field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDescription(s *string) *SurveyUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of description.
func (su *SurveyUpdate) ClearDescription() *SurveyUpdate {
	su.description = nil
	su.cleardescription = true
	return su
}

// SetMetadata sets the metadata field.
func (su *SurveyUpdate) SetMetadata(m map[string]string) *SurveyUpdate {
	su.metadata = &m
	return su
}

// ClearMetadata clears the value of metadata.
func (su *SurveyUpdate) ClearMetadata() *SurveyUpdate {
	su.metadata = nil
	su.clearmetadata = true
	return su
}

// SetDone sets the done field.
func (su *SurveyUpdate) SetDone(b bool) *SurveyUpdate {
	su.done = &b
	return su
}

// SetNillableDone sets the done field if the given value is not nil.
func (su *SurveyUpdate) SetNillableDone(b *bool) *SurveyUpdate {
	if b != nil {
		su.SetDone(*b)
	}
	return su
}

// ClearDone clears the value of done.
func (su *SurveyUpdate) ClearDone() *SurveyUpdate {
	su.done = nil
	su.cleardone = true
	return su
}

// SetIsPublic sets the isPublic field.
func (su *SurveyUpdate) SetIsPublic(b bool) *SurveyUpdate {
	su.isPublic = &b
	return su
}

// SetNillableIsPublic sets the isPublic field if the given value is not nil.
func (su *SurveyUpdate) SetNillableIsPublic(b *bool) *SurveyUpdate {
	if b != nil {
		su.SetIsPublic(*b)
	}
	return su
}

// ClearIsPublic clears the value of isPublic.
func (su *SurveyUpdate) ClearIsPublic() *SurveyUpdate {
	su.isPublic = nil
	su.clearisPublic = true
	return su
}

// SetFlowID sets the flow edge to Flow by id.
func (su *SurveyUpdate) SetFlowID(id uuid.UUID) *SurveyUpdate {
	if su.flow == nil {
		su.flow = make(map[uuid.UUID]struct{})
	}
	su.flow[id] = struct{}{}
	return su
}

// SetFlow sets the flow edge to Flow.
func (su *SurveyUpdate) SetFlow(f *Flow) *SurveyUpdate {
	return su.SetFlowID(f.ID)
}

// SetForID sets the for edge to User by id.
func (su *SurveyUpdate) SetForID(id uuid.UUID) *SurveyUpdate {
	if su._for == nil {
		su._for = make(map[uuid.UUID]struct{})
	}
	su._for[id] = struct{}{}
	return su
}

// SetFor sets the for edge to User.
func (su *SurveyUpdate) SetFor(u *User) *SurveyUpdate {
	return su.SetForID(u.ID)
}

// SetOwnerID sets the owner edge to Domain by id.
func (su *SurveyUpdate) SetOwnerID(id uuid.UUID) *SurveyUpdate {
	if su.owner == nil {
		su.owner = make(map[uuid.UUID]struct{})
	}
	su.owner[id] = struct{}{}
	return su
}

// SetNillableOwnerID sets the owner edge to Domain by id if the given value is not nil.
func (su *SurveyUpdate) SetNillableOwnerID(id *uuid.UUID) *SurveyUpdate {
	if id != nil {
		su = su.SetOwnerID(*id)
	}
	return su
}

// SetOwner sets the owner edge to Domain.
func (su *SurveyUpdate) SetOwner(d *Domain) *SurveyUpdate {
	return su.SetOwnerID(d.ID)
}

// ClearFlow clears the flow edge to Flow.
func (su *SurveyUpdate) ClearFlow() *SurveyUpdate {
	su.clearedFlow = true
	return su
}

// ClearFor clears the for edge to User.
func (su *SurveyUpdate) ClearFor() *SurveyUpdate {
	su.clearedFor = true
	return su
}

// ClearOwner clears the owner edge to Domain.
func (su *SurveyUpdate) ClearOwner() *SurveyUpdate {
	su.clearedOwner = true
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SurveyUpdate) Save(ctx context.Context) (int, error) {
	if su.title != nil {
		if err := survey.TitleValidator(*su.title); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"title\": %v", err)
		}
	}
	if len(su.flow) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"flow\"")
	}
	if su.clearedFlow && su.flow == nil {
		return 0, errors.New("ent: clearing a unique edge \"flow\"")
	}
	if len(su._for) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"for\"")
	}
	if su.clearedFor && su._for == nil {
		return 0, errors.New("ent: clearing a unique edge \"for\"")
	}
	if len(su.owner) > 1 {
		return 0, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return su.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SurveyUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SurveyUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SurveyUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SurveyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   survey.Table,
			Columns: survey.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: survey.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value := su.tags; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: survey.FieldTags,
		})
	}
	if value := su.lastInteraction; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: survey.FieldLastInteraction,
		})
	}
	if value := su.title; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: survey.FieldTitle,
		})
	}
	if value := su.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: survey.FieldDescription,
		})
	}
	if su.cleardescription {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: survey.FieldDescription,
		})
	}
	if value := su.metadata; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: survey.FieldMetadata,
		})
	}
	if su.clearmetadata {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: survey.FieldMetadata,
		})
	}
	if value := su.done; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: survey.FieldDone,
		})
	}
	if su.cleardone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: survey.FieldDone,
		})
	}
	if value := su.isPublic; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: survey.FieldIsPublic,
		})
	}
	if su.clearisPublic {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: survey.FieldIsPublic,
		})
	}
	if su.clearedFlow {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   survey.FlowTable,
			Columns: []string{survey.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.flow; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   survey.FlowTable,
			Columns: []string{survey.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedFor {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.ForTable,
			Columns: []string{survey.ForColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su._for; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.ForTable,
			Columns: []string{survey.ForColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.OwnerTable,
			Columns: []string{survey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.OwnerTable,
			Columns: []string{survey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SurveyUpdateOne is the builder for updating a single Survey entity.
type SurveyUpdateOne struct {
	config
	id              uuid.UUID
	tags            *[]string
	lastInteraction *time.Time

	title            *string
	description      *string
	cleardescription bool
	metadata         *map[string]string
	clearmetadata    bool
	done             *bool
	cleardone        bool
	isPublic         *bool
	clearisPublic    bool
	flow             map[uuid.UUID]struct{}
	_for             map[uuid.UUID]struct{}
	owner            map[uuid.UUID]struct{}
	clearedFlow      bool
	clearedFor       bool
	clearedOwner     bool
}

// SetTags sets the tags field.
func (suo *SurveyUpdateOne) SetTags(s []string) *SurveyUpdateOne {
	suo.tags = &s
	return suo
}

// SetLastInteraction sets the lastInteraction field.
func (suo *SurveyUpdateOne) SetLastInteraction(t time.Time) *SurveyUpdateOne {
	suo.lastInteraction = &t
	return suo
}

// SetTitle sets the title field.
func (suo *SurveyUpdateOne) SetTitle(s string) *SurveyUpdateOne {
	suo.title = &s
	return suo
}

// SetDescription sets the description field.
func (suo *SurveyUpdateOne) SetDescription(s string) *SurveyUpdateOne {
	suo.description = &s
	return suo
}

// SetNillableDescription sets the description field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDescription(s *string) *SurveyUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of description.
func (suo *SurveyUpdateOne) ClearDescription() *SurveyUpdateOne {
	suo.description = nil
	suo.cleardescription = true
	return suo
}

// SetMetadata sets the metadata field.
func (suo *SurveyUpdateOne) SetMetadata(m map[string]string) *SurveyUpdateOne {
	suo.metadata = &m
	return suo
}

// ClearMetadata clears the value of metadata.
func (suo *SurveyUpdateOne) ClearMetadata() *SurveyUpdateOne {
	suo.metadata = nil
	suo.clearmetadata = true
	return suo
}

// SetDone sets the done field.
func (suo *SurveyUpdateOne) SetDone(b bool) *SurveyUpdateOne {
	suo.done = &b
	return suo
}

// SetNillableDone sets the done field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableDone(b *bool) *SurveyUpdateOne {
	if b != nil {
		suo.SetDone(*b)
	}
	return suo
}

// ClearDone clears the value of done.
func (suo *SurveyUpdateOne) ClearDone() *SurveyUpdateOne {
	suo.done = nil
	suo.cleardone = true
	return suo
}

// SetIsPublic sets the isPublic field.
func (suo *SurveyUpdateOne) SetIsPublic(b bool) *SurveyUpdateOne {
	suo.isPublic = &b
	return suo
}

// SetNillableIsPublic sets the isPublic field if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableIsPublic(b *bool) *SurveyUpdateOne {
	if b != nil {
		suo.SetIsPublic(*b)
	}
	return suo
}

// ClearIsPublic clears the value of isPublic.
func (suo *SurveyUpdateOne) ClearIsPublic() *SurveyUpdateOne {
	suo.isPublic = nil
	suo.clearisPublic = true
	return suo
}

// SetFlowID sets the flow edge to Flow by id.
func (suo *SurveyUpdateOne) SetFlowID(id uuid.UUID) *SurveyUpdateOne {
	if suo.flow == nil {
		suo.flow = make(map[uuid.UUID]struct{})
	}
	suo.flow[id] = struct{}{}
	return suo
}

// SetFlow sets the flow edge to Flow.
func (suo *SurveyUpdateOne) SetFlow(f *Flow) *SurveyUpdateOne {
	return suo.SetFlowID(f.ID)
}

// SetForID sets the for edge to User by id.
func (suo *SurveyUpdateOne) SetForID(id uuid.UUID) *SurveyUpdateOne {
	if suo._for == nil {
		suo._for = make(map[uuid.UUID]struct{})
	}
	suo._for[id] = struct{}{}
	return suo
}

// SetFor sets the for edge to User.
func (suo *SurveyUpdateOne) SetFor(u *User) *SurveyUpdateOne {
	return suo.SetForID(u.ID)
}

// SetOwnerID sets the owner edge to Domain by id.
func (suo *SurveyUpdateOne) SetOwnerID(id uuid.UUID) *SurveyUpdateOne {
	if suo.owner == nil {
		suo.owner = make(map[uuid.UUID]struct{})
	}
	suo.owner[id] = struct{}{}
	return suo
}

// SetNillableOwnerID sets the owner edge to Domain by id if the given value is not nil.
func (suo *SurveyUpdateOne) SetNillableOwnerID(id *uuid.UUID) *SurveyUpdateOne {
	if id != nil {
		suo = suo.SetOwnerID(*id)
	}
	return suo
}

// SetOwner sets the owner edge to Domain.
func (suo *SurveyUpdateOne) SetOwner(d *Domain) *SurveyUpdateOne {
	return suo.SetOwnerID(d.ID)
}

// ClearFlow clears the flow edge to Flow.
func (suo *SurveyUpdateOne) ClearFlow() *SurveyUpdateOne {
	suo.clearedFlow = true
	return suo
}

// ClearFor clears the for edge to User.
func (suo *SurveyUpdateOne) ClearFor() *SurveyUpdateOne {
	suo.clearedFor = true
	return suo
}

// ClearOwner clears the owner edge to Domain.
func (suo *SurveyUpdateOne) ClearOwner() *SurveyUpdateOne {
	suo.clearedOwner = true
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *SurveyUpdateOne) Save(ctx context.Context) (*Survey, error) {
	if suo.title != nil {
		if err := survey.TitleValidator(*suo.title); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"title\": %v", err)
		}
	}
	if len(suo.flow) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"flow\"")
	}
	if suo.clearedFlow && suo.flow == nil {
		return nil, errors.New("ent: clearing a unique edge \"flow\"")
	}
	if len(suo._for) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"for\"")
	}
	if suo.clearedFor && suo._for == nil {
		return nil, errors.New("ent: clearing a unique edge \"for\"")
	}
	if len(suo.owner) > 1 {
		return nil, errors.New("ent: multiple assignments on a unique edge \"owner\"")
	}
	return suo.sqlSave(ctx)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SurveyUpdateOne) SaveX(ctx context.Context) *Survey {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SurveyUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SurveyUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SurveyUpdateOne) sqlSave(ctx context.Context) (s *Survey, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   survey.Table,
			Columns: survey.Columns,
			ID: &sqlgraph.FieldSpec{
				Value:  suo.id,
				Type:   field.TypeUUID,
				Column: survey.FieldID,
			},
		},
	}
	if value := suo.tags; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: survey.FieldTags,
		})
	}
	if value := suo.lastInteraction; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  *value,
			Column: survey.FieldLastInteraction,
		})
	}
	if value := suo.title; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: survey.FieldTitle,
		})
	}
	if value := suo.description; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  *value,
			Column: survey.FieldDescription,
		})
	}
	if suo.cleardescription {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: survey.FieldDescription,
		})
	}
	if value := suo.metadata; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  *value,
			Column: survey.FieldMetadata,
		})
	}
	if suo.clearmetadata {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: survey.FieldMetadata,
		})
	}
	if value := suo.done; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: survey.FieldDone,
		})
	}
	if suo.cleardone {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: survey.FieldDone,
		})
	}
	if value := suo.isPublic; value != nil {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  *value,
			Column: survey.FieldIsPublic,
		})
	}
	if suo.clearisPublic {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Column: survey.FieldIsPublic,
		})
	}
	if suo.clearedFlow {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   survey.FlowTable,
			Columns: []string{survey.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.flow; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   survey.FlowTable,
			Columns: []string{survey.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedFor {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.ForTable,
			Columns: []string{survey.ForColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo._for; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.ForTable,
			Columns: []string{survey.ForColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.clearedOwner {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.OwnerTable,
			Columns: []string{survey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.owner; len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.OwnerTable,
			Columns: []string{survey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for k, _ := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Survey{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{survey.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
