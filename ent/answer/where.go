// Code generated by entc, DO NOT EDIT.

package answer

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their identifier.
func ID(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// At applies equality check predicate on the "at" field. It's identical to AtEQ.
func At(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAt), v))
	})
}

// Valid applies equality check predicate on the "valid" field. It's identical to ValidEQ.
func Valid(v bool) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValid), v))
	})
}

// AtEQ applies the EQ predicate on the "at" field.
func AtEQ(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAt), v))
	})
}

// AtNEQ applies the NEQ predicate on the "at" field.
func AtNEQ(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAt), v))
	})
}

// AtIn applies the In predicate on the "at" field.
func AtIn(vs ...time.Time) predicate.Answer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Answer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAt), v...))
	})
}

// AtNotIn applies the NotIn predicate on the "at" field.
func AtNotIn(vs ...time.Time) predicate.Answer {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Answer(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAt), v...))
	})
}

// AtGT applies the GT predicate on the "at" field.
func AtGT(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAt), v))
	})
}

// AtGTE applies the GTE predicate on the "at" field.
func AtGTE(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAt), v))
	})
}

// AtLT applies the LT predicate on the "at" field.
func AtLT(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAt), v))
	})
}

// AtLTE applies the LTE predicate on the "at" field.
func AtLTE(v time.Time) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAt), v))
	})
}

// ValidEQ applies the EQ predicate on the "valid" field.
func ValidEQ(v bool) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldValid), v))
	})
}

// ValidNEQ applies the NEQ predicate on the "valid" field.
func ValidNEQ(v bool) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldValid), v))
	})
}

// ValidIsNil applies the IsNil predicate on the "valid" field.
func ValidIsNil() predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldValid)))
	})
}

// ValidNotNil applies the NotNil predicate on the "valid" field.
func ValidNotNil() predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldValid)))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Answer) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Answer) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Answer) predicate.Answer {
	return predicate.Answer(func(s *sql.Selector) {
		p(s.Not())
	})
}
