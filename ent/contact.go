// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/user"
	"github.com/rs/xid"
)

// Contact is the model entity for the Contact schema.
type Contact struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind contact.Kind `json:"kind,omitempty"`
	// Principal holds the value of the "principal" field.
	Principal bool `json:"principal,omitempty"`
	// Validated holds the value of the "validated" field.
	Validated bool `json:"validated,omitempty"`
	// FromAccount holds the value of the "fromAccount" field.
	FromAccount bool `json:"fromAccount,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContactQuery when eager-loading is set.
	Edges         ContactEdges `json:"edges"`
	user_contacts *xid.ID
}

// ContactEdges holds the relations/edges for other nodes in the graph.
type ContactEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContactEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Contact) scanValues() []interface{} {
	return []interface{}{
		&xid.ID{},         // id
		&sql.NullString{}, // name
		&sql.NullString{}, // value
		&sql.NullString{}, // kind
		&sql.NullBool{},   // principal
		&sql.NullBool{},   // validated
		&sql.NullBool{},   // fromAccount
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Contact) fkValues() []interface{} {
	return []interface{}{
		&xid.ID{}, // user_contacts
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Contact fields.
func (c *Contact) assignValues(values ...interface{}) error {
	if m, n := len(values), len(contact.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*xid.ID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		c.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		c.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field value", values[1])
	} else if value.Valid {
		c.Value = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field kind", values[2])
	} else if value.Valid {
		c.Kind = contact.Kind(value.String)
	}
	if value, ok := values[3].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field principal", values[3])
	} else if value.Valid {
		c.Principal = value.Bool
	}
	if value, ok := values[4].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field validated", values[4])
	} else if value.Valid {
		c.Validated = value.Bool
	}
	if value, ok := values[5].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field fromAccount", values[5])
	} else if value.Valid {
		c.FromAccount = value.Bool
	}
	values = values[6:]
	if len(values) == len(contact.ForeignKeys) {
		if value, ok := values[0].(*xid.ID); !ok {
			return fmt.Errorf("unexpected type %T for field user_contacts", values[0])
		} else if value != nil {
			c.user_contacts = value
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Contact.
func (c *Contact) QueryOwner() *UserQuery {
	return (&ContactClient{config: c.config}).QueryOwner(c)
}

// Update returns a builder for updating this Contact.
// Note that, you need to call Contact.Unwrap() before calling this method, if this Contact
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Contact) Update() *ContactUpdateOne {
	return (&ContactClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Contact) Unwrap() *Contact {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Contact is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Contact) String() string {
	var builder strings.Builder
	builder.WriteString("Contact(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteString(", value=")
	builder.WriteString(c.Value)
	builder.WriteString(", kind=")
	builder.WriteString(fmt.Sprintf("%v", c.Kind))
	builder.WriteString(", principal=")
	builder.WriteString(fmt.Sprintf("%v", c.Principal))
	builder.WriteString(", validated=")
	builder.WriteString(fmt.Sprintf("%v", c.Validated))
	builder.WriteString(", fromAccount=")
	builder.WriteString(fmt.Sprintf("%v", c.FromAccount))
	builder.WriteByte(')')
	return builder.String()
}

// Contacts is a parsable slice of Contact.
type Contacts []*Contact

func (c Contacts) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
