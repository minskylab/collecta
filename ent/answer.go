// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/answer"
	"github.com/minskylab/collecta/ent/question"
	"github.com/rs/xid"
)

// Answer is the model entity for the Answer schema.
type Answer struct {
	config `json:"-"`
	// ID of the ent.
	ID xid.ID `json:"id,omitempty"`
	// At holds the value of the "at" field.
	At time.Time `json:"at,omitempty"`
	// Responses holds the value of the "responses" field.
	Responses []string `json:"responses,omitempty"`
	// Valid holds the value of the "valid" field.
	Valid bool `json:"valid,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnswerQuery when eager-loading is set.
	Edges            AnswerEdges `json:"edges"`
	question_answers *uuid.UUID
}

// AnswerEdges holds the relations/edges for other nodes in the graph.
type AnswerEdges struct {
	// Question holds the value of the question edge.
	Question *Question
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnswerEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Answer) scanValues() []interface{} {
	return []interface{}{
		&xid.ID{},       // id
		&sql.NullTime{}, // at
		&[]byte{},       // responses
		&sql.NullBool{}, // valid
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Answer) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // question_answers
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Answer fields.
func (a *Answer) assignValues(values ...interface{}) error {
	if m, n := len(values), len(answer.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*xid.ID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		a.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field at", values[0])
	} else if value.Valid {
		a.At = value.Time
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field responses", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &a.Responses); err != nil {
			return fmt.Errorf("unmarshal field responses: %v", err)
		}
	}
	if value, ok := values[2].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field valid", values[2])
	} else if value.Valid {
		a.Valid = value.Bool
	}
	values = values[3:]
	if len(values) == len(answer.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field question_answers", values[0])
		} else if value != nil {
			a.question_answers = value
		}
	}
	return nil
}

// QueryQuestion queries the question edge of the Answer.
func (a *Answer) QueryQuestion() *QuestionQuery {
	return (&AnswerClient{config: a.config}).QueryQuestion(a)
}

// Update returns a builder for updating this Answer.
// Note that, you need to call Answer.Unwrap() before calling this method, if this Answer
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Answer) Update() *AnswerUpdateOne {
	return (&AnswerClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Answer) Unwrap() *Answer {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Answer is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Answer) String() string {
	var builder strings.Builder
	builder.WriteString("Answer(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", at=")
	builder.WriteString(a.At.Format(time.ANSIC))
	builder.WriteString(", responses=")
	builder.WriteString(fmt.Sprintf("%v", a.Responses))
	builder.WriteString(", valid=")
	builder.WriteString(fmt.Sprintf("%v", a.Valid))
	builder.WriteByte(')')
	return builder.String()
}

// Answers is a parsable slice of Answer.
type Answers []*Answer

func (a Answers) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
