// Code generated by entc, DO NOT EDIT.

package input

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their identifier.
func ID(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Multiple applies equality check predicate on the "multiple" field. It's identical to MultipleEQ.
func Multiple(v bool) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiple), v))
	})
}

// KindEQ applies the EQ predicate on the "kind" field.
func KindEQ(v Kind) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKind), v))
	})
}

// KindNEQ applies the NEQ predicate on the "kind" field.
func KindNEQ(v Kind) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKind), v))
	})
}

// KindIn applies the In predicate on the "kind" field.
func KindIn(vs ...Kind) predicate.Input {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Input(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldKind), v...))
	})
}

// KindNotIn applies the NotIn predicate on the "kind" field.
func KindNotIn(vs ...Kind) predicate.Input {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Input(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldKind), v...))
	})
}

// MultipleEQ applies the EQ predicate on the "multiple" field.
func MultipleEQ(v bool) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMultiple), v))
	})
}

// MultipleNEQ applies the NEQ predicate on the "multiple" field.
func MultipleNEQ(v bool) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMultiple), v))
	})
}

// MultipleIsNil applies the IsNil predicate on the "multiple" field.
func MultipleIsNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMultiple)))
	})
}

// MultipleNotNil applies the NotNil predicate on the "multiple" field.
func MultipleNotNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMultiple)))
	})
}

// DefaultsIsNil applies the IsNil predicate on the "defaults" field.
func DefaultsIsNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDefaults)))
	})
}

// DefaultsNotNil applies the NotNil predicate on the "defaults" field.
func DefaultsNotNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDefaults)))
	})
}

// OptionsIsNil applies the IsNil predicate on the "options" field.
func OptionsIsNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOptions)))
	})
}

// OptionsNotNil applies the NotNil predicate on the "options" field.
func OptionsNotNil() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOptions)))
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Input) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Input) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Input) predicate.Input {
	return predicate.Input(func(s *sql.Selector) {
		p(s.Not())
	})
}
