// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/flow"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/survey"
)

// SurveyCreate is the builder for creating a Survey entity.
type SurveyCreate struct {
	config
	mutation *SurveyMutation
	hooks    []Hook
}

// SetTags sets the tags field.
func (sc *SurveyCreate) SetTags(s []string) *SurveyCreate {
	sc.mutation.SetTags(s)
	return sc
}

// SetLastInteraction sets the lastInteraction field.
func (sc *SurveyCreate) SetLastInteraction(t time.Time) *SurveyCreate {
	sc.mutation.SetLastInteraction(t)
	return sc
}

// SetDueDate sets the dueDate field.
func (sc *SurveyCreate) SetDueDate(t time.Time) *SurveyCreate {
	sc.mutation.SetDueDate(t)
	return sc
}

// SetNillableDueDate sets the dueDate field if the given value is not nil.
func (sc *SurveyCreate) SetNillableDueDate(t *time.Time) *SurveyCreate {
	if t != nil {
		sc.SetDueDate(*t)
	}
	return sc
}

// SetTitle sets the title field.
func (sc *SurveyCreate) SetTitle(s string) *SurveyCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetDescription sets the description field.
func (sc *SurveyCreate) SetDescription(s string) *SurveyCreate {
	sc.mutation.SetDescription(s)
	return sc
}

// SetNillableDescription sets the description field if the given value is not nil.
func (sc *SurveyCreate) SetNillableDescription(s *string) *SurveyCreate {
	if s != nil {
		sc.SetDescription(*s)
	}
	return sc
}

// SetMetadata sets the metadata field.
func (sc *SurveyCreate) SetMetadata(m map[string]string) *SurveyCreate {
	sc.mutation.SetMetadata(m)
	return sc
}

// SetDone sets the done field.
func (sc *SurveyCreate) SetDone(b bool) *SurveyCreate {
	sc.mutation.SetDone(b)
	return sc
}

// SetNillableDone sets the done field if the given value is not nil.
func (sc *SurveyCreate) SetNillableDone(b *bool) *SurveyCreate {
	if b != nil {
		sc.SetDone(*b)
	}
	return sc
}

// SetIsPublic sets the isPublic field.
func (sc *SurveyCreate) SetIsPublic(b bool) *SurveyCreate {
	sc.mutation.SetIsPublic(b)
	return sc
}

// SetNillableIsPublic sets the isPublic field if the given value is not nil.
func (sc *SurveyCreate) SetNillableIsPublic(b *bool) *SurveyCreate {
	if b != nil {
		sc.SetIsPublic(*b)
	}
	return sc
}

// SetID sets the id field.
func (sc *SurveyCreate) SetID(u uuid.UUID) *SurveyCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetFlowID sets the flow edge to Flow by id.
func (sc *SurveyCreate) SetFlowID(id uuid.UUID) *SurveyCreate {
	sc.mutation.SetFlowID(id)
	return sc
}

// SetFlow sets the flow edge to Flow.
func (sc *SurveyCreate) SetFlow(f *Flow) *SurveyCreate {
	return sc.SetFlowID(f.ID)
}

// SetForID sets the for edge to Person by id.
func (sc *SurveyCreate) SetForID(id uuid.UUID) *SurveyCreate {
	sc.mutation.SetForID(id)
	return sc
}

// SetFor sets the for edge to Person.
func (sc *SurveyCreate) SetFor(p *Person) *SurveyCreate {
	return sc.SetForID(p.ID)
}

// SetOwnerID sets the owner edge to Domain by id.
func (sc *SurveyCreate) SetOwnerID(id uuid.UUID) *SurveyCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetNillableOwnerID sets the owner edge to Domain by id if the given value is not nil.
func (sc *SurveyCreate) SetNillableOwnerID(id *uuid.UUID) *SurveyCreate {
	if id != nil {
		sc = sc.SetOwnerID(*id)
	}
	return sc
}

// SetOwner sets the owner edge to Domain.
func (sc *SurveyCreate) SetOwner(d *Domain) *SurveyCreate {
	return sc.SetOwnerID(d.ID)
}

// Save creates the Survey in the database.
func (sc *SurveyCreate) Save(ctx context.Context) (*Survey, error) {
	if _, ok := sc.mutation.Tags(); !ok {
		return nil, errors.New("ent: missing required field \"tags\"")
	}
	if _, ok := sc.mutation.LastInteraction(); !ok {
		return nil, errors.New("ent: missing required field \"lastInteraction\"")
	}
	if _, ok := sc.mutation.DueDate(); !ok {
		v := survey.DefaultDueDate()
		sc.mutation.SetDueDate(v)
	}
	if _, ok := sc.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := survey.TitleValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"title\": %v", err)
		}
	}
	if _, ok := sc.mutation.Done(); !ok {
		v := survey.DefaultDone
		sc.mutation.SetDone(v)
	}
	if _, ok := sc.mutation.IsPublic(); !ok {
		v := survey.DefaultIsPublic
		sc.mutation.SetIsPublic(v)
	}
	if _, ok := sc.mutation.FlowID(); !ok {
		return nil, errors.New("ent: missing required edge \"flow\"")
	}
	if _, ok := sc.mutation.ForID(); !ok {
		return nil, errors.New("ent: missing required edge \"for\"")
	}
	var (
		err  error
		node *Survey
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SurveyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SurveyCreate) SaveX(ctx context.Context) *Survey {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SurveyCreate) sqlSave(ctx context.Context) (*Survey, error) {
	var (
		s     = &Survey{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: survey.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: survey.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		s.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: survey.FieldTags,
		})
		s.Tags = value
	}
	if value, ok := sc.mutation.LastInteraction(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: survey.FieldLastInteraction,
		})
		s.LastInteraction = value
	}
	if value, ok := sc.mutation.DueDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: survey.FieldDueDate,
		})
		s.DueDate = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: survey.FieldTitle,
		})
		s.Title = value
	}
	if value, ok := sc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: survey.FieldDescription,
		})
		s.Description = value
	}
	if value, ok := sc.mutation.Metadata(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: survey.FieldMetadata,
		})
		s.Metadata = value
	}
	if value, ok := sc.mutation.Done(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: survey.FieldDone,
		})
		s.Done = value
	}
	if value, ok := sc.mutation.IsPublic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: survey.FieldIsPublic,
		})
		s.IsPublic = value
	}
	if nodes := sc.mutation.FlowIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   survey.FlowTable,
			Columns: []string{survey.FlowColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: flow.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ForIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.ForTable,
			Columns: []string{survey.ForColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   survey.OwnerTable,
			Columns: []string{survey.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
