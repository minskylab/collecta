// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/shorts"
)

// Shorts is the model entity for the Shorts schema.
type Shorts struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value uuid.UUID `json:"value,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Shorts) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // key
		&uuid.UUID{},      // value
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Shorts fields.
func (s *Shorts) assignValues(values ...interface{}) error {
	if m, n := len(values), len(shorts.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	s.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field key", values[0])
	} else if value.Valid {
		s.Key = value.String
	}
	if value, ok := values[1].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field value", values[1])
	} else if value != nil {
		s.Value = *value
	}
	return nil
}

// Update returns a builder for updating this Shorts.
// Note that, you need to call Shorts.Unwrap() before calling this method, if this Shorts
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Shorts) Update() *ShortsUpdateOne {
	return (&ShortsClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (s *Shorts) Unwrap() *Shorts {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Shorts is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Shorts) String() string {
	var builder strings.Builder
	builder.WriteString("Shorts(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", key=")
	builder.WriteString(s.Key)
	builder.WriteString(", value=")
	builder.WriteString(fmt.Sprintf("%v", s.Value))
	builder.WriteByte(')')
	return builder.String()
}

// ShortsSlice is a parsable slice of Shorts.
type ShortsSlice []*Shorts

func (s ShortsSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
