// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/survey"
	"github.com/minskylab/collecta/uuid"
)

// DomainCreate is the builder for creating a Domain entity.
type DomainCreate struct {
	config
	mutation *DomainMutation
	hooks    []Hook
}

// SetName sets the name field.
func (dc *DomainCreate) SetName(s string) *DomainCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetEmail sets the email field.
func (dc *DomainCreate) SetEmail(s string) *DomainCreate {
	dc.mutation.SetEmail(s)
	return dc
}

// SetDomain sets the domain field.
func (dc *DomainCreate) SetDomain(s string) *DomainCreate {
	dc.mutation.SetDomain(s)
	return dc
}

// SetCallback sets the callback field.
func (dc *DomainCreate) SetCallback(s string) *DomainCreate {
	dc.mutation.SetCallback(s)
	return dc
}

// SetTags sets the tags field.
func (dc *DomainCreate) SetTags(s []string) *DomainCreate {
	dc.mutation.SetTags(s)
	return dc
}

// SetID sets the id field.
func (dc *DomainCreate) SetID(u uuid.UUID) *DomainCreate {
	dc.mutation.SetID(u)
	return dc
}

// AddSurveyIDs adds the surveys edge to Survey by ids.
func (dc *DomainCreate) AddSurveyIDs(ids ...uuid.UUID) *DomainCreate {
	dc.mutation.AddSurveyIDs(ids...)
	return dc
}

// AddSurveys adds the surveys edges to Survey.
func (dc *DomainCreate) AddSurveys(s ...*Survey) *DomainCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dc.AddSurveyIDs(ids...)
}

// AddUserIDs adds the users edge to Person by ids.
func (dc *DomainCreate) AddUserIDs(ids ...uuid.UUID) *DomainCreate {
	dc.mutation.AddUserIDs(ids...)
	return dc
}

// AddUsers adds the users edges to Person.
func (dc *DomainCreate) AddUsers(p ...*Person) *DomainCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dc.AddUserIDs(ids...)
}

// AddAdminIDs adds the admins edge to Person by ids.
func (dc *DomainCreate) AddAdminIDs(ids ...uuid.UUID) *DomainCreate {
	dc.mutation.AddAdminIDs(ids...)
	return dc
}

// AddAdmins adds the admins edges to Person.
func (dc *DomainCreate) AddAdmins(p ...*Person) *DomainCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return dc.AddAdminIDs(ids...)
}

// Save creates the Domain in the database.
func (dc *DomainCreate) Save(ctx context.Context) (*Domain, error) {
	if _, ok := dc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := domain.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if _, ok := dc.mutation.Email(); !ok {
		return nil, errors.New("ent: missing required field \"email\"")
	}
	if v, ok := dc.mutation.Email(); ok {
		if err := domain.EmailValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"email\": %v", err)
		}
	}
	if _, ok := dc.mutation.Domain(); !ok {
		return nil, errors.New("ent: missing required field \"domain\"")
	}
	if _, ok := dc.mutation.Callback(); !ok {
		return nil, errors.New("ent: missing required field \"callback\"")
	}
	if _, ok := dc.mutation.Tags(); !ok {
		return nil, errors.New("ent: missing required field \"tags\"")
	}
	var (
		err  error
		node *Domain
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DomainMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DomainCreate) SaveX(ctx context.Context) *Domain {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DomainCreate) sqlSave(ctx context.Context) (*Domain, error) {
	var (
		d     = &Domain{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: domain.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: domain.FieldID,
			},
		}
	)
	if id, ok := dc.mutation.ID(); ok {
		d.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldName,
		})
		d.Name = value
	}
	if value, ok := dc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldEmail,
		})
		d.Email = value
	}
	if value, ok := dc.mutation.Domain(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldDomain,
		})
		d.Domain = value
	}
	if value, ok := dc.mutation.Callback(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: domain.FieldCallback,
		})
		d.Callback = value
	}
	if value, ok := dc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: domain.FieldTags,
		})
		d.Tags = value
	}
	if nodes := dc.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   domain.SurveysTable,
			Columns: []string{domain.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.UsersTable,
			Columns: domain.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.AdminsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   domain.AdminsTable,
			Columns: domain.AdminsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: person.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
