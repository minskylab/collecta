// Code generated by entc, DO NOT EDIT.

package flow

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/minskylab/collecta/ent/predicate"
	"github.com/rs/xid"
)

// ID filters vertices based on their identifier.
func ID(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateTable applies equality check predicate on the "stateTable" field. It's identical to StateTableEQ.
func StateTable(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateTable), v))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...xid.ID) predicate.Flow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...xid.ID) predicate.Flow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v xid.ID) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateTableEQ applies the EQ predicate on the "stateTable" field.
func StateTableEQ(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStateTable), v))
	})
}

// StateTableNEQ applies the NEQ predicate on the "stateTable" field.
func StateTableNEQ(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStateTable), v))
	})
}

// StateTableIn applies the In predicate on the "stateTable" field.
func StateTableIn(vs ...string) predicate.Flow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStateTable), v...))
	})
}

// StateTableNotIn applies the NotIn predicate on the "stateTable" field.
func StateTableNotIn(vs ...string) predicate.Flow {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Flow(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStateTable), v...))
	})
}

// StateTableGT applies the GT predicate on the "stateTable" field.
func StateTableGT(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStateTable), v))
	})
}

// StateTableGTE applies the GTE predicate on the "stateTable" field.
func StateTableGTE(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStateTable), v))
	})
}

// StateTableLT applies the LT predicate on the "stateTable" field.
func StateTableLT(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStateTable), v))
	})
}

// StateTableLTE applies the LTE predicate on the "stateTable" field.
func StateTableLTE(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStateTable), v))
	})
}

// StateTableContains applies the Contains predicate on the "stateTable" field.
func StateTableContains(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStateTable), v))
	})
}

// StateTableHasPrefix applies the HasPrefix predicate on the "stateTable" field.
func StateTableHasPrefix(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStateTable), v))
	})
}

// StateTableHasSuffix applies the HasSuffix predicate on the "stateTable" field.
func StateTableHasSuffix(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStateTable), v))
	})
}

// StateTableEqualFold applies the EqualFold predicate on the "stateTable" field.
func StateTableEqualFold(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStateTable), v))
	})
}

// StateTableContainsFold applies the ContainsFold predicate on the "stateTable" field.
func StateTableContainsFold(v string) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStateTable), v))
	})
}

// InputsIsNil applies the IsNil predicate on the "inputs" field.
func InputsIsNil() predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldInputs)))
	})
}

// InputsNotNil applies the NotNil predicate on the "inputs" field.
func InputsNotNil() predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldInputs)))
	})
}

// HasQuestions applies the HasEdge predicate on the "questions" edge.
func HasQuestions() predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionsWith applies the HasEdge predicate on the "questions" edge with a given conditions (other predicates).
func HasQuestionsWith(preds ...predicate.Question) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionsTable, QuestionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Flow) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Flow) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Flow) predicate.Flow {
	return predicate.Flow(func(s *sql.Selector) {
		p(s.Not())
	})
}
