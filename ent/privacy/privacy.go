// Code generated by entc, DO NOT EDIT.

package privacy

import (
	"context"
	"errors"
	"fmt"

	"github.com/minskylab/collecta/ent"
)

var (
	// Allow may be returned by rules to indicate that the policy
	// evaluation should terminate with an allow decision.
	Allow = errors.New("ent/privacy: allow rule")

	// Deny may be returned by rules to indicate that the policy
	// evaluation should terminate with an deny decision.
	Deny = errors.New("ent/privacy: deny rule")

	// Skip may be returned by rules to indicate that the policy
	// evaluation should continue to the next rule.
	Skip = errors.New("ent/privacy: skip rule")
)

// Allowf returns an formatted wrapped Allow decision.
func Allowf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Allow)...)
}

// Denyf returns an formatted wrapped Deny decision.
func Denyf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Deny)...)
}

// Skipf returns an formatted wrapped Skip decision.
func Skipf(format string, a ...interface{}) error {
	return fmt.Errorf(format+": %w", append(a, Skip)...)
}

type (
	// QueryPolicy combines multiple query rules into a single policy.
	QueryPolicy []QueryRule

	// QueryRule defines the interface deciding whether a
	// query is allowed and optionally modify it.
	QueryRule interface {
		EvalQuery(context.Context, ent.Query) error
	}
)

// EvalQuery evaluates a query against a query policy.
func (policy QueryPolicy) EvalQuery(ctx context.Context, q ent.Query) error {
	for _, rule := range policy {
		switch err := rule.EvalQuery(ctx, q); {
		case err == nil || errors.Is(err, Skip):
		case errors.Is(err, Allow):
			return nil
		default:
			return err
		}
	}
	return nil
}

// QueryRuleFunc type is an adapter to allow the use of
// ordinary functions as query rules.
type QueryRuleFunc func(context.Context, ent.Query) error

// Eval returns f(ctx, q).
func (f QueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	return f(ctx, q)
}

type (
	// MutationPolicy combines multiple mutation rules into a single policy.
	MutationPolicy []MutationRule

	// MutationRule defines the interface deciding whether a
	// mutation is allowed and optionally modify it.
	MutationRule interface {
		EvalMutation(context.Context, ent.Mutation) error
	}
)

// EvalMutation evaluates a mutation against a mutation policy.
func (policy MutationPolicy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	for _, rule := range policy {
		switch err := rule.EvalMutation(ctx, m); {
		case err == nil || errors.Is(err, Skip):
		case errors.Is(err, Allow):
			return nil
		default:
			return err
		}
	}
	return nil
}

// MutationRuleFunc type is an adapter to allow the use of
// ordinary functions as mutation rules.
type MutationRuleFunc func(context.Context, ent.Mutation) error

// EvalMutation returns f(ctx, m).
func (f MutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return f(ctx, m)
}

// Policy groups query and mutation policies.
type Policy struct {
	Query    QueryPolicy
	Mutation MutationPolicy
}

// EvalQuery forwards evaluation to query policy.
func (policy Policy) EvalQuery(ctx context.Context, q ent.Query) error {
	return policy.Query.EvalQuery(ctx, q)
}

// EvalMutation forwards evaluation to mutation policy.
func (policy Policy) EvalMutation(ctx context.Context, m ent.Mutation) error {
	return policy.Mutation.EvalMutation(ctx, m)
}

// QueryMutationRule is the interface that groups query and mutation rules.
type QueryMutationRule interface {
	QueryRule
	MutationRule
}

// AlwaysAllowRule returns a rule that returns an allow decision.
func AlwaysAllowRule() QueryMutationRule {
	return fixedDecisionRule{Allow}
}

// AlwaysDenyRule returns a rule that returns a deny decision.
func AlwaysDenyRule() QueryMutationRule {
	return fixedDecisionRule{Deny}
}

type fixedDecisionRule struct{ err error }

func (f fixedDecisionRule) EvalQuery(context.Context, ent.Query) error       { return f.err }
func (f fixedDecisionRule) EvalMutation(context.Context, ent.Mutation) error { return f.err }

// DenyMutationOperationRule returns a rule denying specified mutation operation.
func DenyMutationOperationRule(op ent.Op) MutationRule {
	return MutationRuleFunc(func(_ context.Context, m ent.Mutation) error {
		if m.Op().Is(op) {
			return Denyf("ent/privacy: operation %s is not allowed", m.Op())
		}
		return Skip
	})
}

// The AccountQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AccountQueryRuleFunc func(context.Context, *ent.AccountQuery) error

// EvalQuery return f(ctx, q).
func (f AccountQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AccountQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AccountQuery", q)
}

// The AccountMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AccountMutationRuleFunc func(context.Context, *ent.AccountMutation) error

// EvalMutation calls f(ctx, m).
func (f AccountMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AccountMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AccountMutation", m)
}

// The AnswerQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type AnswerQueryRuleFunc func(context.Context, *ent.AnswerQuery) error

// EvalQuery return f(ctx, q).
func (f AnswerQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.AnswerQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.AnswerQuery", q)
}

// The AnswerMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type AnswerMutationRuleFunc func(context.Context, *ent.AnswerMutation) error

// EvalMutation calls f(ctx, m).
func (f AnswerMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.AnswerMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.AnswerMutation", m)
}

// The ContactQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ContactQueryRuleFunc func(context.Context, *ent.ContactQuery) error

// EvalQuery return f(ctx, q).
func (f ContactQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ContactQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ContactQuery", q)
}

// The ContactMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ContactMutationRuleFunc func(context.Context, *ent.ContactMutation) error

// EvalMutation calls f(ctx, m).
func (f ContactMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ContactMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ContactMutation", m)
}

// The DatumQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DatumQueryRuleFunc func(context.Context, *ent.DatumQuery) error

// EvalQuery return f(ctx, q).
func (f DatumQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DatumQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DatumQuery", q)
}

// The DatumMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DatumMutationRuleFunc func(context.Context, *ent.DatumMutation) error

// EvalMutation calls f(ctx, m).
func (f DatumMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DatumMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DatumMutation", m)
}

// The DeviceQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DeviceQueryRuleFunc func(context.Context, *ent.DeviceQuery) error

// EvalQuery return f(ctx, q).
func (f DeviceQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DeviceQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DeviceQuery", q)
}

// The DeviceMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DeviceMutationRuleFunc func(context.Context, *ent.DeviceMutation) error

// EvalMutation calls f(ctx, m).
func (f DeviceMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DeviceMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DeviceMutation", m)
}

// The DomainQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type DomainQueryRuleFunc func(context.Context, *ent.DomainQuery) error

// EvalQuery return f(ctx, q).
func (f DomainQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.DomainQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.DomainQuery", q)
}

// The DomainMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type DomainMutationRuleFunc func(context.Context, *ent.DomainMutation) error

// EvalMutation calls f(ctx, m).
func (f DomainMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.DomainMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.DomainMutation", m)
}

// The FlowQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type FlowQueryRuleFunc func(context.Context, *ent.FlowQuery) error

// EvalQuery return f(ctx, q).
func (f FlowQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.FlowQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.FlowQuery", q)
}

// The FlowMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type FlowMutationRuleFunc func(context.Context, *ent.FlowMutation) error

// EvalMutation calls f(ctx, m).
func (f FlowMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.FlowMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.FlowMutation", m)
}

// The IPQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type IPQueryRuleFunc func(context.Context, *ent.IPQuery) error

// EvalQuery return f(ctx, q).
func (f IPQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IPQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.IPQuery", q)
}

// The IPMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type IPMutationRuleFunc func(context.Context, *ent.IPMutation) error

// EvalMutation calls f(ctx, m).
func (f IPMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.IPMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.IPMutation", m)
}

// The InputQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type InputQueryRuleFunc func(context.Context, *ent.InputQuery) error

// EvalQuery return f(ctx, q).
func (f InputQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InputQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.InputQuery", q)
}

// The InputMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type InputMutationRuleFunc func(context.Context, *ent.InputMutation) error

// EvalMutation calls f(ctx, m).
func (f InputMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.InputMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.InputMutation", m)
}

// The PersonQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type PersonQueryRuleFunc func(context.Context, *ent.PersonQuery) error

// EvalQuery return f(ctx, q).
func (f PersonQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.PersonQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.PersonQuery", q)
}

// The PersonMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type PersonMutationRuleFunc func(context.Context, *ent.PersonMutation) error

// EvalMutation calls f(ctx, m).
func (f PersonMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.PersonMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.PersonMutation", m)
}

// The QuestionQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type QuestionQueryRuleFunc func(context.Context, *ent.QuestionQuery) error

// EvalQuery return f(ctx, q).
func (f QuestionQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.QuestionQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.QuestionQuery", q)
}

// The QuestionMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type QuestionMutationRuleFunc func(context.Context, *ent.QuestionMutation) error

// EvalMutation calls f(ctx, m).
func (f QuestionMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.QuestionMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.QuestionMutation", m)
}

// The ShortQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type ShortQueryRuleFunc func(context.Context, *ent.ShortQuery) error

// EvalQuery return f(ctx, q).
func (f ShortQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ShortQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.ShortQuery", q)
}

// The ShortMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type ShortMutationRuleFunc func(context.Context, *ent.ShortMutation) error

// EvalMutation calls f(ctx, m).
func (f ShortMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.ShortMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.ShortMutation", m)
}

// The SurveyQueryRuleFunc type is an adapter to allow the use of ordinary
// functions as a query rule.
type SurveyQueryRuleFunc func(context.Context, *ent.SurveyQuery) error

// EvalQuery return f(ctx, q).
func (f SurveyQueryRuleFunc) EvalQuery(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SurveyQuery); ok {
		return f(ctx, q)
	}
	return Denyf("ent/privacy: unexpected query type %T, expect *ent.SurveyQuery", q)
}

// The SurveyMutationRuleFunc type is an adapter to allow the use of ordinary
// functions as a mutation rule.
type SurveyMutationRuleFunc func(context.Context, *ent.SurveyMutation) error

// EvalMutation calls f(ctx, m).
func (f SurveyMutationRuleFunc) EvalMutation(ctx context.Context, m ent.Mutation) error {
	if m, ok := m.(*ent.SurveyMutation); ok {
		return f(ctx, m)
	}
	return Denyf("ent/privacy: unexpected mutation type %T, expect *ent.SurveyMutation", m)
}
