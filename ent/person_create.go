// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/account"
	"github.com/minskylab/collecta/ent/contact"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/person"
	"github.com/minskylab/collecta/ent/survey"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetName sets the name field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetLastActivity sets the lastActivity field.
func (pc *PersonCreate) SetLastActivity(t time.Time) *PersonCreate {
	pc.mutation.SetLastActivity(t)
	return pc
}

// SetNillableLastActivity sets the lastActivity field if the given value is not nil.
func (pc *PersonCreate) SetNillableLastActivity(t *time.Time) *PersonCreate {
	if t != nil {
		pc.SetLastActivity(*t)
	}
	return pc
}

// SetUsername sets the username field.
func (pc *PersonCreate) SetUsername(s string) *PersonCreate {
	pc.mutation.SetUsername(s)
	return pc
}

// SetNillableUsername sets the username field if the given value is not nil.
func (pc *PersonCreate) SetNillableUsername(s *string) *PersonCreate {
	if s != nil {
		pc.SetUsername(*s)
	}
	return pc
}

// SetPicture sets the picture field.
func (pc *PersonCreate) SetPicture(s string) *PersonCreate {
	pc.mutation.SetPicture(s)
	return pc
}

// SetNillablePicture sets the picture field if the given value is not nil.
func (pc *PersonCreate) SetNillablePicture(s *string) *PersonCreate {
	if s != nil {
		pc.SetPicture(*s)
	}
	return pc
}

// SetRoles sets the roles field.
func (pc *PersonCreate) SetRoles(s []string) *PersonCreate {
	pc.mutation.SetRoles(s)
	return pc
}

// SetID sets the id field.
func (pc *PersonCreate) SetID(u uuid.UUID) *PersonCreate {
	pc.mutation.SetID(u)
	return pc
}

// AddAccountIDs adds the accounts edge to Account by ids.
func (pc *PersonCreate) AddAccountIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddAccountIDs(ids...)
	return pc
}

// AddAccounts adds the accounts edges to Account.
func (pc *PersonCreate) AddAccounts(a ...*Account) *PersonCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pc.AddAccountIDs(ids...)
}

// AddContactIDs adds the contacts edge to Contact by ids.
func (pc *PersonCreate) AddContactIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddContactIDs(ids...)
	return pc
}

// AddContacts adds the contacts edges to Contact.
func (pc *PersonCreate) AddContacts(c ...*Contact) *PersonCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddContactIDs(ids...)
}

// AddSurveyIDs adds the surveys edge to Survey by ids.
func (pc *PersonCreate) AddSurveyIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddSurveyIDs(ids...)
	return pc
}

// AddSurveys adds the surveys edges to Survey.
func (pc *PersonCreate) AddSurveys(s ...*Survey) *PersonCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSurveyIDs(ids...)
}

// AddDomainIDs adds the domains edge to Domain by ids.
func (pc *PersonCreate) AddDomainIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddDomainIDs(ids...)
	return pc
}

// AddDomains adds the domains edges to Domain.
func (pc *PersonCreate) AddDomains(d ...*Domain) *PersonCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddDomainIDs(ids...)
}

// AddAdminOfIDs adds the adminOf edge to Domain by ids.
func (pc *PersonCreate) AddAdminOfIDs(ids ...uuid.UUID) *PersonCreate {
	pc.mutation.AddAdminOfIDs(ids...)
	return pc
}

// AddAdminOf adds the adminOf edges to Domain.
func (pc *PersonCreate) AddAdminOf(d ...*Domain) *PersonCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pc.AddAdminOfIDs(ids...)
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	if _, ok := pc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if _, ok := pc.mutation.LastActivity(); !ok {
		v := person.DefaultLastActivity()
		pc.mutation.SetLastActivity(v)
	}
	var (
		err  error
		node *Person
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	var (
		pe    = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: person.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		pe.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
		pe.Name = value
	}
	if value, ok := pc.mutation.LastActivity(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: person.FieldLastActivity,
		})
		pe.LastActivity = value
	}
	if value, ok := pc.mutation.Username(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldUsername,
		})
		pe.Username = value
	}
	if value, ok := pc.mutation.Picture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldPicture,
		})
		pe.Picture = value
	}
	if value, ok := pc.mutation.Roles(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: person.FieldRoles,
		})
		pe.Roles = value
	}
	if nodes := pc.mutation.AccountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.AccountsTable,
			Columns: []string{person.AccountsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: account.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ContactsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.ContactsTable,
			Columns: []string{person.ContactsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: contact.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SurveysIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   person.SurveysTable,
			Columns: []string{person.SurveysColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: survey.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DomainsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.DomainsTable,
			Columns: person.DomainsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AdminOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   person.AdminOfTable,
			Columns: person.AdminOfPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: domain.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pe, nil
}
