// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/domain"
	"github.com/minskylab/collecta/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// LastActivity holds the value of the "lastActivity" field.
	LastActivity time.Time `json:"lastActivity,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	domain_users *uuid.UUID
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact
	// Surveys holds the value of the surveys edge.
	Surveys []*Survey
	// Domain holds the value of the domain edge.
	Domain *Domain
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// SurveysOrErr returns the Surveys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SurveysOrErr() ([]*Survey, error) {
	if e.loadedTypes[2] {
		return e.Surveys, nil
	}
	return nil, &NotLoadedError{edge: "surveys"}
}

// DomainOrErr returns the Domain value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) DomainOrErr() (*Domain, error) {
	if e.loadedTypes[3] {
		if e.Domain == nil {
			// The edge domain was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: domain.Label}
		}
		return e.Domain, nil
	}
	return nil, &NotLoadedError{edge: "domain"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // name
		&sql.NullString{}, // username
		&sql.NullTime{},   // lastActivity
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*User) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // domain_users
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		u.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[1])
	} else if value.Valid {
		u.Username = value.String
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastActivity", values[2])
	} else if value.Valid {
		u.LastActivity = value.Time
	}
	values = values[3:]
	if len(values) == len(user.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field domain_users", values[0])
		} else if value != nil {
			u.domain_users = value
		}
	}
	return nil
}

// QueryAccounts queries the accounts edge of the User.
func (u *User) QueryAccounts() *AccountQuery {
	return (&UserClient{config: u.config}).QueryAccounts(u)
}

// QueryContacts queries the contacts edge of the User.
func (u *User) QueryContacts() *ContactQuery {
	return (&UserClient{config: u.config}).QueryContacts(u)
}

// QuerySurveys queries the surveys edge of the User.
func (u *User) QuerySurveys() *SurveyQuery {
	return (&UserClient{config: u.config}).QuerySurveys(u)
}

// QueryDomain queries the domain edge of the User.
func (u *User) QueryDomain() *DomainQuery {
	return (&UserClient{config: u.config}).QueryDomain(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", lastActivity=")
	builder.WriteString(u.LastActivity.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
