// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/minskylab/collecta/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// LastActivity holds the value of the "lastActivity" field.
	LastActivity time.Time `json:"lastActivity,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Roles holds the value of the "roles" field.
	Roles []string `json:"roles,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges UserEdges `json:"edges"`
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Accounts holds the value of the accounts edge.
	Accounts []*Account
	// Contacts holds the value of the contacts edge.
	Contacts []*Contact
	// Surveys holds the value of the surveys edge.
	Surveys []*Survey
	// Domains holds the value of the domains edge.
	Domains []*Domain
	// AdminOf holds the value of the adminOf edge.
	AdminOf []*Domain
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AccountsOrErr returns the Accounts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AccountsOrErr() ([]*Account, error) {
	if e.loadedTypes[0] {
		return e.Accounts, nil
	}
	return nil, &NotLoadedError{edge: "accounts"}
}

// ContactsOrErr returns the Contacts value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ContactsOrErr() ([]*Contact, error) {
	if e.loadedTypes[1] {
		return e.Contacts, nil
	}
	return nil, &NotLoadedError{edge: "contacts"}
}

// SurveysOrErr returns the Surveys value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SurveysOrErr() ([]*Survey, error) {
	if e.loadedTypes[2] {
		return e.Surveys, nil
	}
	return nil, &NotLoadedError{edge: "surveys"}
}

// DomainsOrErr returns the Domains value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) DomainsOrErr() ([]*Domain, error) {
	if e.loadedTypes[3] {
		return e.Domains, nil
	}
	return nil, &NotLoadedError{edge: "domains"}
}

// AdminOfOrErr returns the AdminOf value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AdminOfOrErr() ([]*Domain, error) {
	if e.loadedTypes[4] {
		return e.AdminOf, nil
	}
	return nil, &NotLoadedError{edge: "adminOf"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // name
		&sql.NullTime{},   // lastActivity
		&sql.NullString{}, // username
		&sql.NullString{}, // picture
		&[]byte{},         // roles
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(values ...interface{}) error {
	if m, n := len(values), len(user.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		u.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field lastActivity", values[1])
	} else if value.Valid {
		u.LastActivity = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field username", values[2])
	} else if value.Valid {
		u.Username = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field picture", values[3])
	} else if value.Valid {
		u.Picture = value.String
	}

	if value, ok := values[4].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field roles", values[4])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &u.Roles); err != nil {
			return fmt.Errorf("unmarshal field roles: %v", err)
		}
	}
	return nil
}

// QueryAccounts queries the accounts edge of the User.
func (u *User) QueryAccounts() *AccountQuery {
	return (&UserClient{config: u.config}).QueryAccounts(u)
}

// QueryContacts queries the contacts edge of the User.
func (u *User) QueryContacts() *ContactQuery {
	return (&UserClient{config: u.config}).QueryContacts(u)
}

// QuerySurveys queries the surveys edge of the User.
func (u *User) QuerySurveys() *SurveyQuery {
	return (&UserClient{config: u.config}).QuerySurveys(u)
}

// QueryDomains queries the domains edge of the User.
func (u *User) QueryDomains() *DomainQuery {
	return (&UserClient{config: u.config}).QueryDomains(u)
}

// QueryAdminOf queries the adminOf edge of the User.
func (u *User) QueryAdminOf() *DomainQuery {
	return (&UserClient{config: u.config}).QueryAdminOf(u)
}

// Update returns a builder for updating this User.
// Note that, you need to call User.Unwrap() before calling this method, if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", lastActivity=")
	builder.WriteString(u.LastActivity.Format(time.ANSIC))
	builder.WriteString(", username=")
	builder.WriteString(u.Username)
	builder.WriteString(", picture=")
	builder.WriteString(u.Picture)
	builder.WriteString(", roles=")
	builder.WriteString(fmt.Sprintf("%v", u.Roles))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
